/**
 * @file AP_Scripting_CRSFMenu.h
 * @brief CRSF telemetry menu API for Lua scripting interface
 * 
 * @details This file provides the Lua scripting API for creating custom OSD menus
 *          through the CRSF (TBS Crossfire) telemetry protocol. It enables Lua scripts
 *          to build hierarchical menu structures with configurable parameters that can
 *          be accessed and modified through CRSF-compatible radio transmitters.
 *          
 *          The API integrates with the AP_CRSF_Telem backend to provide bidirectional
 *          communication between ground control and vehicle through the CRSF telemetry link.
 *          
 *          Key capabilities:
 *          - Create hierarchical menu structures with submenus
 *          - Add configurable parameters to menus
 *          - Handle menu navigation events from transmitter
 *          - Send parameter updates back to transmitter
 *          - Manage root-level menu registration
 *          
 * @note This API is only available when AP_CRSF_SCRIPTING_ENABLED is defined
 * @warning Menu and parameter pointers may be reallocated; use indexed access via wrappers
 * 
 * @see AP_CRSF_Telem for underlying telemetry protocol implementation
 * @see libraries/AP_Scripting/docs/docs.lua for Lua binding examples
 */

#pragma once

#include <AP_RCTelemetry/AP_CRSF_Telem.h>
#include "lua/src/lua.hpp"

#if AP_CRSF_SCRIPTING_ENABLED

/**
 * @brief Lua binding to create a new CRSF menu
 * 
 * @details Creates a new menu object that can hold parameters and submenus.
 *          This is the primary entry point for building menu structures in Lua scripts.
 *          The created menu must be registered with add_root_menu() to be accessible.
 * 
 * @param[in] L Lua state containing menu name string
 * @return int Number of return values pushed to Lua stack (menu object)
 * 
 * @note Lua signature: menu = CRSF.new_menu(name)
 */
int lua_CRSF_new_menu(lua_State *L);

/**
 * @brief Lua binding to retrieve menu navigation events from transmitter
 * 
 * @details Polls for menu events generated by user interaction on the CRSF transmitter.
 *          Events include menu navigation, parameter selection, and value changes.
 *          Scripts should call this periodically to handle user input.
 * 
 * @param[in] L Lua state (no arguments)
 * @return int Number of return values pushed to Lua stack (event object or nil)
 * 
 * @note Lua signature: event = CRSF.get_menu_event()
 * @note Returns nil if no events are pending
 */
int lua_CRSF_get_menu_event(lua_State *L);

/**
 * @brief Lua binding to send menu response back to transmitter
 * 
 * @details Sends a response packet to the CRSF transmitter, typically in reply to
 *          a menu event or parameter query. This updates the OSD display with
 *          current menu state and parameter values.
 * 
 * @param[in] L Lua state containing response data
 * @return int Number of return values pushed to Lua stack (success boolean)
 * 
 * @note Lua signature: success = CRSF.send_response(response_data)
 */
int lua_CRSF_send_response(lua_State *L);

/**
 * @brief Lua binding to add a parameter to a menu
 * 
 * @details Adds a configurable parameter entry to an existing menu. Parameters
 *          can be modified by the user through the transmitter OSD interface.
 * 
 * @param[in] L Lua state containing menu object and parameter definition
 * @return int Number of return values pushed to Lua stack (parameter object)
 * 
 * @note Lua signature: param = menu:add_parameter(name, type, value, min, max)
 */
int lua_CRSF_add_parameter(lua_State *L);

/**
 * @brief Lua binding to add a submenu to an existing menu
 * 
 * @details Creates a hierarchical menu structure by adding a submenu to a parent menu.
 *          Enables organization of parameters into logical groups.
 * 
 * @param[in] L Lua state containing parent menu object and submenu name
 * @return int Number of return values pushed to Lua stack (submenu object)
 * 
 * @note Lua signature: submenu = menu:add_menu(submenu_name)
 */
int lua_CRSF_add_menu(lua_State *L);

/**
 * @brief Lua binding to register a menu at the root level
 * 
 * @details Registers a menu as a top-level entry accessible from the transmitter
 *          OSD root menu. Only root-registered menus are visible to the user.
 * 
 * @param[in] L Lua state containing menu object
 * @return int Number of return values pushed to Lua stack (success boolean)
 * 
 * @note Lua signature: success = CRSF.add_root_menu(menu)
 * @note Must be called after menu structure is fully configured
 */
int lua_CRSF_add_root_menu(lua_State *L);

/**
 * @brief Lua binding to retrieve parameter data
 * 
 * @details Retrieves the current data (value, limits, type) associated with
 *          a parameter object. Used to read parameter state in response to events.
 * 
 * @param[in] L Lua state containing parameter object
 * @return int Number of return values pushed to Lua stack (parameter data table)
 * 
 * @note Lua signature: data = param:get_data()
 */
int lua_CRSF_param_data(lua_State *L);

/**
 * @class CRSFParameter
 * @brief Wrapper class for CRSF scripted parameter with stable reference
 * 
 * @details This wrapper maintains a stable reference to an underlying ScriptedParameter
 *          by storing the menu pointer and parameter ID rather than a direct pointer.
 *          This design protects against pointer invalidation when the parameter array
 *          is reallocated during menu construction.
 *          
 *          The wrapper ensures that Lua scripts always access the actual parameter data
 *          rather than a stale copy, even after internal memory reorganization.
 *          
 *          Access pattern: menu pointer + parameter ID → lookup current parameter pointer
 *          
 * @warning Do not cache the raw pointer returned by get_parameter(); always use
 *          indexed access through this wrapper to ensure pointer validity
 * 
 * @note This class is used internally by the Lua binding layer and is not directly
 *       exposed to Lua scripts
 */
class CRSFParameter {
public:
    /**
     * @brief Default constructor for uninitialized parameter wrapper
     */
    CRSFParameter() {}
    
    /**
     * @brief Construct parameter wrapper from menu and parameter pointers
     * 
     * @param[in] m Pointer to parent menu containing this parameter
     * @param[in] p Pointer to ScriptedParameter to wrap (ID is captured)
     */
    CRSFParameter(AP_CRSF_Telem::ScriptedMenu* m, AP_CRSF_Telem::ScriptedParameter* p) : menu(m), param(p->AP_CRSF_Telem::ScriptedParameter::id) {}

    /**
     * @brief Get the unique ID of this parameter
     * 
     * @return uint8_t Parameter ID used for indexed lookup in menu
     * 
     * @note ID remains stable even if parameter array is reallocated
     */
    uint8_t id() const { return param; }
    
    /**
     * @brief Get pointer to the underlying ScriptedParameter
     * 
     * @details Performs indexed lookup through the menu to retrieve the current
     *          parameter pointer. This ensures the returned pointer is always valid,
     *          even if the parameter array has been reallocated since wrapper creation.
     * 
     * @return AP_CRSF_Telem::ScriptedParameter* Pointer to actual parameter data
     * 
     * @warning Do not cache this pointer; parameter reallocation during menu construction
     *          may invalidate it. Always call get_parameter() when access is needed.
     */
    AP_CRSF_Telem::ScriptedParameter* get_parameter() { return menu->find_parameter(param); }

private:
    AP_CRSF_Telem::ScriptedMenu* menu;
    uint8_t param;
};

/**
 * @class CRSFMenu
 * @brief Wrapper class for CRSF scripted menu with parameter and submenu management
 * 
 * @details This wrapper provides a stable interface to an underlying ScriptedMenu,
 *          enabling Lua scripts to build hierarchical menu structures for display
 *          on CRSF-compatible transmitter OSD systems.
 *          
 *          Menus can contain:
 *          - Configurable parameters (values that users can modify)
 *          - Submenus (nested menu structures)
 *          
 *          Menu hierarchy example:
 *          ```
 *          Root Menu
 *            ├── Parameter 1
 *            ├── Parameter 2
 *            └── Submenu A
 *                  ├── Parameter 3
 *                  └── Parameter 4
 *          ```
 *          
 *          Integration: Menus created through this interface are transmitted to
 *          the ground station via the CRSF telemetry protocol (TBS Crossfire).
 *          
 * @warning Adding parameters may trigger reallocation of the parameter array.
 *          Use CRSFParameter wrapper objects rather than raw pointers.
 * 
 * @note This class is used internally by the Lua binding layer and is not directly
 *       exposed to Lua scripts in its raw form
 * 
 * @see AP_CRSF_Telem::ScriptedMenu for underlying menu implementation
 */
class CRSFMenu {
public:
    /**
     * @brief Default constructor for uninitialized menu wrapper
     */
    CRSFMenu() {}
    
    /**
     * @brief Construct menu wrapper from ScriptedMenu pointer
     * 
     * @param[in] m Pointer to underlying ScriptedMenu to wrap
     */
    CRSFMenu(AP_CRSF_Telem::ScriptedMenu* m) : menu(m) {}

    /**
     * @brief Get the unique ID of this menu
     * 
     * @return uint8_t Menu ID used for navigation and event handling
     * 
     * @note Menu ID is assigned during creation and remains stable
     */
    uint8_t id() const { return menu->id; }
    
    /**
     * @brief Get the display name of this menu
     * 
     * @return const char* Menu name string displayed on transmitter OSD
     * 
     * @note Name is set during menu creation and cannot be changed
     */
    const char* name() const { return menu->name; }
    
    /**
     * @brief Get the number of parameters in this menu
     * 
     * @return uint8_t Count of parameters (not including submenus)
     * 
     * @note This count may change as parameters are added during menu construction
     */
    uint8_t num_params() const { return menu->num_params; }
    
    /**
     * @brief Add a parameter to this menu
     * 
     * @details Creates a new configurable parameter entry in the menu. The parameter
     *          will be visible on the transmitter OSD and can be modified by the user.
     *          Parameter data format is CRSF protocol-specific.
     * 
     * @param[in] length Length of parameter data in bytes
     * @param[in] data Parameter data buffer (type, value, limits, etc.)
     * 
     * @return AP_CRSF_Telem::ScriptedParameter* Pointer to created parameter
     * 
     * @warning Adding parameters may reallocate the parameter array, invalidating
     *          previously obtained parameter pointers. Use CRSFParameter wrapper
     *          objects for stable access.
     */
    AP_CRSF_Telem::ScriptedParameter* add_parameter(uint8_t length, const char* data);
    
    /**
     * @brief Add a submenu to this menu
     * 
     * @details Creates a new submenu entry, enabling hierarchical menu organization.
     *          The submenu can contain its own parameters and additional submenus.
     * 
     * @param[in] menu_name Display name for the submenu
     * 
     * @return AP_CRSF_Telem::ScriptedMenu* Pointer to created submenu
     * 
     * @note Submenus should be fully configured before adding to parent menu
     */
    AP_CRSF_Telem::ScriptedMenu* add_menu(const char* menu_name);

    /**
     * @brief Pointer to underlying ScriptedMenu implementation
     * 
     * @note Public member for direct access by binding layer; Lua scripts
     *       access through wrapper methods
     */
    AP_CRSF_Telem::ScriptedMenu* menu;
};

#endif // AP_CRSF_SCRIPTING_ENABLED
