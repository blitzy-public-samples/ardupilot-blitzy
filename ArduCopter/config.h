/**
 * @file config.h
 * @brief ArduCopter Build-Time Configuration System
 * 
 * @details This file defines the default compile-time configuration for ArduCopter,
 *          including flight mode availability, hardware capabilities, safety limits,
 *          and operational parameter defaults. These settings establish the baseline
 *          behavior for all ArduCopter builds.
 *
 * CONFIGURATION HIERARCHY:
 * ========================
 * 1. Hardware definitions (hwdef) - Board-specific capabilities
 * 2. This file (config.h) - Software feature defaults
 * 3. APM_Config.h (user) - Local build customizations
 * 4. Runtime parameters - In-flight adjustable settings
 *
 * FEATURE FLAG SYSTEM:
 * ====================
 * Feature flags control compile-time inclusion of code modules using patterns:
 * - MODE_*_ENABLED: Flight mode availability (e.g., MODE_AUTO_ENABLED)
 * - AP_*_ENABLED: Library/subsystem availability (from library config headers)
 * - *_DEFAULT: Default runtime parameter values
 *
 * Setting a MODE_*_ENABLED flag to 0 completely removes that flight mode from
 * the compiled binary, saving flash memory. This is useful for:
 * - Small boards with limited flash space
 * - Certification builds requiring specific mode sets
 * - Custom applications that don't need all modes
 *
 * SAFETY IMPLICATIONS:
 * ====================
 * Many configuration options affect flight safety:
 * - Failsafe thresholds and actions
 * - Arming check parameters
 * - Landing detection sensitivity
 * - Control limits and maximum rates
 * 
 * @warning Modifying defaults can affect vehicle stability and safety.
 *          Test thoroughly in SITL simulation before hardware testing.
 *
 * @warning Disabling safety-critical modes (RTL, LAND) or features (EKF failsafe)
 *          can leave the vehicle without proper failsafe recovery options.
 *
 * MEMORY CONSIDERATIONS:
 * ======================
 * Each enabled flight mode consumes flash memory (typically 2-10KB).
 * For boards with limited flash:
 * - Disable unused flight modes (Sport, Drift, Flip, etc.)
 * - Consider disabling advanced features (AutoTune, SmartRTL)
 * - Keep essential modes: Stabilize, AltHold, Loiter, RTL, Land
 *
 * CUSTOMIZATION APPROACH:
 * =======================
 * DO NOT edit this file directly. Instead:
 * 1. Copy APM_Config.h.example to APM_Config.h in ArduCopter directory
 * 2. Override specific defines in your APM_Config.h
 * 3. Build with custom configuration
 *
 * Example APM_Config.h override:
 * @code
 * #define MODE_SPORT_ENABLED 0    // Disable Sport mode
 * #define MODE_DRIFT_ENABLED 0    // Disable Drift mode
 * #define PILOT_VELZ_MAX 500      // Increase max climb rate to 5m/s
 * @endcode
 *
 * TESTING REQUIREMENTS:
 * =====================
 * After modifying configuration:
 * 1. Verify compilation succeeds
 * 2. Check binary size fits on target board
 * 3. Test in SITL simulation: sim_vehicle.py -v ArduCopter
 * 4. Verify all required modes are available
 * 5. Test failsafe behaviors thoroughly
 * 6. Validate arming checks function correctly
 *
 * @note This file is organized in the same order as APM_Config.h.example
 *       for easy cross-reference during customization.
 *
 * @see APM_Config.h.example - Template for custom configurations
 * @see defines.h - Core type definitions and frame configurations
 * @see Parameters.h - Runtime adjustable parameters
 *
 * @copyright Copyright (c) 2010-2025 ArduPilot.org
 * @author ArduPilot Development Team
 */

//
#pragma once

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
//
//  DO NOT EDIT this file to adjust your configuration.  Create your own
//  APM_Config.h and use APM_Config.h.example as a reference.
//
// WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING WARNING
///
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
//
// Default and automatic configuration details.
//
// Notes for maintainers:
//
// - Try to keep this file organised in the same order as APM_Config.h.example
//
#include "defines.h"

///
/// DO NOT EDIT THIS INCLUDE - if you want to make a local change, make that
/// change in your local copy of APM_Config.h.
///
#include "APM_Config.h"
#include <AP_ADSB/AP_ADSB_config.h>
#include <AP_Follow/AP_Follow_config.h>
#include <AC_Avoidance/AC_Avoidance_config.h>

//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////
// HARDWARE CONFIGURATION AND CONNECTIONS
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////

/**
 * @brief Verify hardware abstraction layer board type is defined
 * 
 * @details CONFIG_HAL_BOARD must be set by the build system to identify the
 *          target hardware platform (ChibiOS/ARM, Linux, ESP32, SITL, etc.).
 *          This is set automatically by the waf build system based on the
 *          --board parameter.
 * 
 * @note This check ensures the build system is properly configured before
 *       attempting to compile vehicle code that depends on HAL interfaces.
 */
#ifndef CONFIG_HAL_BOARD
#error CONFIG_HAL_BOARD must be defined to build ArduCopter
#endif

/**
 * @brief Arming safety delay in seconds
 * 
 * @details Time delay between satisfying all arming checks and allowing the
 *          vehicle to arm. This safety delay gives the pilot time to verify
 *          conditions are safe before arming motors.
 * 
 * Default: 2.0 seconds
 * 
 * @warning Reducing this below 1.0 second may not give adequate time for
 *          pilot verification of safe conditions. Values below 0.5 seconds
 *          are not recommended for safety reasons.
 * 
 * @note This is a compile-time default; runtime value is controlled by
 *       ARMING_CHECK parameter and can be adjusted by the user.
 */
#ifndef ARMING_DELAY_SEC
    # define ARMING_DELAY_SEC 2.0f
#endif

//////////////////////////////////////////////////////////////////////////////
// FRAME_CONFIG
//

/**
 * @brief Default vehicle frame configuration type
 * 
 * @details Defines the mechanical configuration of the vehicle. Options include:
 *          - MULTICOPTER_FRAME: Standard multicopter (quad, hex, octo, etc.)
 *          - HELI_FRAME: Traditional helicopter with swashplate
 *          - Other frame types defined in defines.h
 * 
 * Default: MULTICOPTER_FRAME
 * 
 * Frame configuration affects:
 * - Motor mixing algorithms
 * - Available flight modes (helicopters require ACRO mode)
 * - Control tuning defaults
 * - Servo output configuration
 * 
 * @note This is typically set by the build system or hwdef, not by users.
 *       The actual frame type (X, +, V, H, etc.) is selected at runtime via
 *       the FRAME_TYPE parameter.
 * 
 * @see defines.h for complete list of frame configuration options
 * @see AP_Motors library for frame-specific motor mixing implementations
 */
#ifndef FRAME_CONFIG
 # define FRAME_CONFIG   MULTICOPTER_FRAME
#endif

/////////////////////////////////////////////////////////////////////////////////
// TradHeli defaults

/**
 * @brief Traditional helicopter-specific configuration overrides
 * 
 * @details Helicopters require different default settings than multirotors due
 *          to their mechanical complexity and control characteristics:
 * 
 * RC_FAST_SPEED (125 Hz): Helicopters use slower servo update rates compared
 * to multirotors (490 Hz) because:
 * - Traditional servos have mechanical response limitations
 * - Swashplate linkages have inertia that limits useful update rates
 * - Higher rates can cause servo heating and premature wear
 * 
 * WP_YAW_BEHAVIOR_DEFAULT (LOOK_AHEAD): Helicopters perform better with
 * look-ahead yaw control during waypoint missions because:
 * - Smoother transitions between waypoints
 * - Reduced power consumption from constant heading adjustments
 * - More natural flight trajectory following
 * 
 * @note These are compile-time defaults for helicopter frames only.
 *       Multirotors use different defaults defined below.
 */
#if FRAME_CONFIG == HELI_FRAME
  # define RC_FAST_SPEED                        125  // Helicopter servo update rate in Hz
  # define WP_YAW_BEHAVIOR_DEFAULT              WP_YAW_BEHAVIOR_LOOK_AHEAD
#endif

//////////////////////////////////////////////////////////////////////////////
// PWM control
// default RC speed in Hz

/**
 * @brief Default servo/ESC output update rate in Hz
 * 
 * @details PWM output frequency for motor and servo control. This affects:
 * 
 * For Multirotors (490 Hz default):
 * - Faster response to attitude changes
 * - Better disturbance rejection
 * - Improved hover stability
 * - Compatible with most modern ESCs
 * 
 * For Helicopters (125 Hz override above):
 * - Matches traditional servo mechanical response
 * - Prevents servo overheating
 * - Reduces mechanical wear
 * 
 * Hardware Considerations:
 * - Analog servos: typically 50-125 Hz maximum
 * - Digital servos: can handle up to 333 Hz
 * - Modern ESCs: support 50-500+ Hz (check specifications)
 * - DShot ESCs: use digital protocol instead of PWM rate
 * 
 * @warning Setting this too high for analog servos can cause overheating
 *          and premature failure. Verify your hardware specifications.
 * 
 * @note This is a compile-time default. Runtime control is via RC_SPEED
 *       parameter which can be adjusted per-output channel.
 * 
 * @see SRV_Channel library for output channel configuration
 */
#ifndef RC_FAST_SPEED
   #   define RC_FAST_SPEED 490
#endif

//////////////////////////////////////////////////////////////////////////////
// Rangefinder
//

/**
 * @brief Rangefinder distance measurement low-pass filter cutoff
 * 
 * @details Low-pass filter applied to rangefinder distance measurements to
 *          reduce noise and spurious readings. Value is a filter coefficient
 *          (0.0 = no filtering, 1.0 = maximum filtering).
 * 
 * Default: 0.5 (moderate filtering)
 * 
 * Lower values (0.1-0.3): Less filtering, faster response, more noise
 * Higher values (0.6-0.9): More filtering, slower response, smoother data
 * 
 * @note Appropriate value depends on rangefinder type and flight conditions.
 *       Lidars typically need less filtering than sonars. Outdoor flight may
 *       need more filtering due to vegetation and uneven terrain.
 */
#ifndef RANGEFINDER_FILT_DEFAULT
 # define RANGEFINDER_FILT_DEFAULT 0.5f     // filter for rangefinder distance
#endif

/**
 * @brief Surface tracking timeout in milliseconds
 * 
 * @details Maximum time allowed without valid rangefinder data before surface
 *          tracking resets to current altitude. Prevents vehicle from attempting
 *          to follow stale altitude targets when flying over surfaces the
 *          rangefinder cannot measure (water, black surfaces, beyond max range).
 * 
 * Default: 1000 ms (1 second)
 * 
 * @warning Too short a timeout may cause frequent resets over temporarily
 *          unmeasurable surfaces. Too long may cause altitude deviations when
 *          leaving measurable terrain.
 * 
 * @note Used during terrain following and precision landing modes.
 */
#ifndef SURFACE_TRACKING_TIMEOUT_MS
 # define SURFACE_TRACKING_TIMEOUT_MS  1000 // surface tracking target alt will reset to current rangefinder alt after this many milliseconds without a good rangefinder alt
#endif

/**
 * @brief Default MAVLink system ID for this vehicle
 * 
 * @details Unique identifier for this vehicle on the MAVLink network. Used by
 *          ground stations and companion computers to address messages to this
 *          specific vehicle when multiple vehicles share a communication link.
 * 
 * Default: 1
 * Range: 1-255
 * 
 * @note Change this if operating multiple vehicles simultaneously. Each vehicle
 *       must have a unique system ID to prevent command conflicts.
 * 
 * @see GCS_MAVLink library for communication protocol implementation
 */
#ifndef MAV_SYSTEM_ID
 # define MAV_SYSTEM_ID          1
#endif

// prearm GPS hdop check

/**
 * @brief GPS horizontal dilution of precision (HDOP) threshold for arming
 * 
 * @details Maximum HDOP value (unitless, scaled by 100) that indicates adequate
 *          GPS accuracy for flight. HDOP represents GPS geometry quality:
 *          - Lower values = better satellite geometry = more accurate position
 *          - Higher values = poor satellite geometry = less accurate position
 * 
 * Default: 140 (HDOP of 1.4)
 * Typical values: 100-200 (HDOP 1.0-2.0)
 * 
 * This threshold is used during pre-arm checks when:
 * - Geofencing is enabled (requires accurate position)
 * - GPS-dependent flight modes are configured
 * - Home position needs to be set accurately
 * 
 * HDOP Interpretation:
 * - <100 (1.0): Excellent GPS accuracy
 * - 100-200 (1.0-2.0): Good accuracy, suitable for flight
 * - 200-500 (2.0-5.0): Moderate accuracy, marginal for autonomous flight
 * - >500 (5.0+): Poor accuracy, should not arm
 * 
 * @warning Setting this too high allows arming with poor GPS accuracy, which
 *          can lead to position errors, fence breaches, and flyaways.
 * 
 * @note Runtime parameter GPS_HDOP_GOOD allows per-vehicle adjustment.
 */
#ifndef GPS_HDOP_GOOD_DEFAULT
 # define GPS_HDOP_GOOD_DEFAULT         140     // minimum hdop that represents a good position.  used during pre-arm checks if fence is enabled
#endif

// missing terrain data failsafe

/**
 * @brief Terrain data unavailable timeout triggering failsafe in milliseconds
 * 
 * @details When terrain following is active, this defines how long the vehicle
 *          will continue without terrain database updates before triggering a
 *          failsafe action (typically RTL).
 * 
 * Default: 5000 ms (5 seconds)
 * 
 * Terrain data can become unavailable when:
 * - Flying beyond the loaded terrain database boundary
 * - Terrain database is incomplete for the area
 * - SD card read errors prevent loading terrain data
 * - Terrain database was not pre-loaded for mission area
 * 
 * @warning Setting this too short may cause false failsafes during brief
 *          terrain loading delays. Setting too long may allow the vehicle to
 *          continue terrain following without valid altitude reference, risking
 *          ground collision.
 * 
 * @note Only active when terrain following mode is enabled. Does not affect
 *       normal GPS/barometer altitude control.
 * 
 * @see AP_Terrain library for terrain database management
 */
#ifndef FS_TERRAIN_TIMEOUT_MS
 #define FS_TERRAIN_TIMEOUT_MS          5000     // 5 seconds of missing terrain data will trigger failsafe (RTL)
#endif

// pre-arm baro vs inertial nav max alt disparity

/**
 * @brief Maximum altitude disparity between barometer and inertial navigation
 * 
 * @details Pre-arm check threshold for altitude sensor consistency. Compares
 *          barometric altitude with inertial navigation estimated altitude to
 *          detect sensor failures before flight.
 * 
 * Default: 100 cm (1 meter)
 * 
 * Large disparities indicate:
 * - Barometer calibration error (bad ground pressure reference)
 * - Accelerometer calibration error (causing inertial drift)
 * - EKF not properly initialized
 * - Sensor hardware failure
 * 
 * @warning This check helps prevent altitude control problems after takeoff.
 *          Disabling or increasing this threshold significantly can allow flight
 *          with faulty altitude sensing, causing altitude deviations or crashes.
 * 
 * @note Both sensors should agree closely before takeoff since inertial nav
 *       has not yet accumulated drift and barometer is fresh from ground
 *       pressure calibration.
 */
#ifndef PREARM_MAX_ALT_DISPARITY_CM
 # define PREARM_MAX_ALT_DISPARITY_CM       100     // barometer and inertial nav altitude must be within this many centimeters
#endif

//////////////////////////////////////////////////////////////////////////////
//  EKF Failsafe

/**
 * @brief Default action when EKF (Extended Kalman Filter) failsafe triggers
 * 
 * @details The EKF failsafe activates when the navigation filter detects that
 *          its state estimates have become unreliable (high variance in position,
 *          velocity, or attitude estimates). This typically indicates:
 *          - Sensor failures or conflicts (GPS, compass, IMU)
 *          - Magnetic interference affecting compass
 *          - GPS glitches or jamming
 *          - Vibration affecting accelerometers
 * 
 * Default: FS_EKF_ACTION_LAND (autonomous land in place)
 * 
 * Available actions:
 * - LAND: Immediate descent and land at current location (safest)
 * - RTL: Return to launch and land (requires confident position estimate)
 * - LAND_EVEN_STABILIZE: Land even if in manual modes
 * 
 * @warning The EKF failsafe indicates the vehicle has lost reliable position
 *          and/or velocity estimation. RTL action may not be safe if position
 *          estimate is unreliable. LAND is the safest default action.
 * 
 * @warning Do not disable EKF failsafe without understanding the risks. Flying
 *          with failed navigation can lead to flyaways or loss of control.
 * 
 * @note This is a critical safety feature. EKF variance monitoring detects
 *       navigation system failures that could otherwise go unnoticed until
 *       loss of control occurs.
 * 
 * @see AP_NavEKF3 library for EKF implementation and variance monitoring
 */
#ifndef FS_EKF_ACTION_DEFAULT
 # define FS_EKF_ACTION_DEFAULT         FS_EKF_ACTION_LAND  // EKF failsafe triggers land by default
#endif

/**
 * @brief EKF failsafe variance threshold (unitless)
 * 
 * @details Normalized variance threshold for EKF compass and velocity estimates.
 *          When filtered variance exceeds this threshold, EKF failsafe triggers.
 *          
 * Default: 0.8 (dimensionless variance metric)
 * Typical range: 0.6-1.0
 * 
 * Lower values (0.6-0.7): More sensitive, earlier detection, may have false positives
 * Higher values (0.9-1.0): Less sensitive, later detection, more tolerance for transients
 * 
 * The variance represents the EKF's confidence in its estimates:
 * - Low variance (<0.8): EKF is confident in state estimates
 * - High variance (>0.8): EKF detects inconsistencies between sensors
 * 
 * @warning Setting this too high delays failsafe triggering, allowing flight
 *          with unreliable navigation. Setting too low may cause false positives
 *          from temporary sensor disturbances.
 * 
 * @note This threshold is applied after filtering (see FS_EKF_FILT_DEFAULT)
 *       to prevent false triggers from brief sensor glitches.
 */
#ifndef FS_EKF_THRESHOLD_DEFAULT
 # define FS_EKF_THRESHOLD_DEFAULT      0.8f    // EKF failsafe's default compass and velocity variance threshold above which the EKF failsafe will be triggered
#endif

/**
 * @brief Maximum altitude difference between EKF origin and home position (km)
 * 
 * @details Sanity check to prevent EKF initialization with unrealistic altitude
 *          differences. Ensures EKF origin (first GPS fix location) and home
 *          position are within reasonable vertical distance.
 * 
 * Default: 50 km (50,000 meters)
 * 
 * This check prevents:
 * - Initialization with corrupt GPS altitude data
 * - Errors from GPS altitude jumps during initialization
 * - Mathematical overflow in altitude calculations
 * 
 * @note This is a sanity limit, not a functional constraint. Normal operations
 *       occur well within this limit (typical altitude variations <5km).
 *       
 * @note GPS altitude can have large errors (especially AMSL vs WGS84 datum
 *       differences), but should never exceed 50km in practice.
 */
#ifndef EKF_ORIGIN_MAX_ALT_KM
 # define EKF_ORIGIN_MAX_ALT_KM         50   // EKF origin and home must be within 50km vertically
#endif

/**
 * @brief Low-pass filter cutoff frequency for EKF variance monitoring (Hz)
 * 
 * @details Variance estimates are filtered before comparing to failsafe threshold
 *          to prevent false triggers from brief sensor disturbances or transients.
 * 
 * Default: 5.0 Hz cutoff frequency
 * 
 * Filter characteristics:
 * - Higher frequency (8-10 Hz): Faster response, less filtering, more sensitive
 * - Lower frequency (2-4 Hz): Slower response, more filtering, less sensitive
 * 
 * 5 Hz provides good balance between:
 * - Quick detection of sustained EKF problems
 * - Rejection of brief sensor glitches and transients
 * 
 * @note This filter prevents momentary sensor spikes from triggering failsafe
 *       while still detecting sustained navigation problems within ~200ms.
 */
#ifndef FS_EKF_FILT_DEFAULT
# define FS_EKF_FILT_DEFAULT     5.0f    // frequency cutoff of EKF variance filters
#endif

//////////////////////////////////////////////////////////////////////////////
// FLIGHT MODE AND FEATURE ENABLE FLAGS
//////////////////////////////////////////////////////////////////////////////

/**
 * @brief Enable AutoTune flight mode and functionality
 * 
 * @details AutoTune automatically tunes PID controller gains for optimal vehicle
 *          response by performing test maneuvers and analyzing the results.
 * 
 * Default: 1 (enabled)
 * 
 * When enabled:
 * - Adds AutoTune flight mode to available mode list
 * - Includes AutoTune algorithm code (~5-8 KB flash)
 * - Allows automatic tuning of rate and angle controller PIDs
 * 
 * When disabled (0):
 * - Saves flash memory on resource-constrained boards
 * - AutoTune mode will not appear in mode selection
 * - Manual tuning required for all PID parameters
 * 
 * @note AutoTune is valuable for new vehicle setups and after significant
 *       hardware changes. Can be disabled on production vehicles with
 *       established tune to save memory.
 * 
 * @see AC_AutoTune library for tuning algorithm implementation
 */
#ifndef AUTOTUNE_ENABLED
 # define AUTOTUNE_ENABLED  1
#endif

/**
 * @brief Enable navigation guidance from external computer/companion
 * 
 * @details Allows an external navigation computer or companion computer to send
 *          position, velocity, or acceleration commands to guide the vehicle.
 *          Used for computer vision-based navigation, obstacle avoidance, and
 *          custom path planning.
 * 
 * Default: 1 (enabled)
 * 
 * When enabled:
 * - Accepts SET_POSITION_TARGET_LOCAL_NED MAVLink messages
 * - Accepts SET_POSITION_TARGET_GLOBAL_INT MAVLink messages  
 * - Allows precision landing and vision-based positioning
 * - Enables advanced autonomous behaviors beyond waypoint navigation
 * 
 * When disabled (0):
 * - External guidance commands ignored
 * - Saves small amount of flash memory (~2 KB)
 * - Disables companion computer navigation integration
 * 
 * @note Required for ROS integration, computer vision navigation, and
 *       advanced autonomous applications.
 * 
 * @see GCS_MAVLink library for command message handling
 */
#ifndef AC_NAV_GUIDED
 # define AC_NAV_GUIDED    1
#endif

//////////////////////////////////////////////////////////////////////////////
// FLIGHT MODE AVAILABILITY FLAGS
//////////////////////////////////////////////////////////////////////////////
// 
// The following MODE_*_ENABLED flags control compile-time inclusion of flight
// modes. Setting a flag to 0 completely removes that mode from the compiled
// binary, saving flash memory.
//
// MEMORY SAVINGS PER MODE:
// - Simple modes (Acro, Stabilize): ~2-3 KB
// - Navigation modes (Auto, Guided, RTL): ~5-8 KB  
// - Advanced modes (AutoTune, SmartRTL): ~5-10 KB
//
// ESSENTIAL MODES (recommended to keep enabled):
// - STABILIZE: Basic manual flight with attitude control
// - ALT_HOLD: Manual flight with automatic altitude hold
// - LOITER: GPS position hold
// - RTL: Return to launch (critical failsafe mode)
// - LAND: Autonomous landing (critical failsafe mode)
//
// OPTIONAL MODES (can disable to save memory):
// - SPORT, DRIFT, FLIP: Specialized flight modes
// - FOLLOW, ZIGZAG: Advanced autonomous modes
// - BRAKE, POSHOLD: Alternative position control modes
//
// DEPENDENCY NOTES:
// - AUTO mode requires GUIDED, CIRCLE, and RTL modes
// - SmartRTL requires RTL mode
// - Helicopter frames require ACRO mode
// - Some modes require specific hardware (e.g., FlowHold needs optical flow)
//
// Dependency checking is performed at the end of this file.
//////////////////////////////////////////////////////////////////////////////

/**
 * @brief Enable Acro (acrobatic) flight mode
 * 
 * @details Rate-controlled manual flight mode where stick inputs directly
 *          command rotation rates rather than angles. Provides maximum control
 *          authority and maneuverability.
 * 
 * Default: 1 (enabled)
 * 
 * Flight characteristics:
 * - Roll/pitch/yaw stick inputs command rotation rates in deg/s
 * - No automatic leveling or angle limits (except training mode)
 * - Altitude not automatically controlled
 * - Requires skilled pilot for safe operation
 * 
 * @warning Helicopter frames (FRAME_CONFIG == HELI_FRAME) require ACRO mode
 *          and will fail to compile if disabled. See dependency check at end
 *          of this file.
 * 
 * @note Acro mode is essential for aerobatic flight and provides the most
 *       direct control response. Not recommended for novice pilots.
 * 
 * @see mode_acro.cpp for implementation details
 */
#ifndef MODE_ACRO_ENABLED
# define MODE_ACRO_ENABLED 1
#endif

/**
 * @brief Enable Auto (autonomous mission) flight mode
 * 
 * @details Autonomous mode that executes pre-programmed waypoint missions with
 *          support for complex mission commands (takeoff, land, loiter, camera
 *          control, conditional logic, etc.).
 * 
 * Default: 1 (enabled)
 * 
 * Capabilities:
 * - Waypoint navigation with configurable speeds and behaviors
 * - Automated takeoff and landing sequences
 * - Camera trigger and gimbal control during missions
 * - Conditional commands (delay, distance, region)
 * - Spline waypoints for smooth curved paths
 * - Rally point and fence integration
 * 
 * @warning AUTO mode requires GUIDED, CIRCLE, and RTL modes to be enabled.
 *          Dependency checks at end of file will generate compile errors if
 *          these dependencies are not met.
 * 
 * @note Essential for survey missions, automated inspection, and any
 *       pre-programmed autonomous operations. Disabling saves ~8-10 KB flash.
 * 
 * @see mode_auto.cpp for mission execution implementation
 * @see AP_Mission library for mission command definitions
 */
#ifndef MODE_AUTO_ENABLED
# define MODE_AUTO_ENABLED 1
#endif

/**
 * @brief Enable Brake (stop) flight mode
 * 
 * @details Rapidly decelerates vehicle to a stop, then maintains position.
 *          Combines aggressive horizontal deceleration with altitude hold.
 * 
 * Default: 1 (enabled)
 * 
 * Behavior:
 * - Aggressive horizontal braking (default 750 cm/s/s deceleration)
 * - Altitude maintained at current height
 * - Useful as panic stop or for obstacle avoidance integration
 * - Can be triggered by pilot or avoidance system
 * 
 * @note Can be disabled to save ~2-3 KB flash on memory-constrained boards.
 *       Similar functionality available through PosHold mode with less aggressive
 *       deceleration.
 * 
 * @see mode_brake.cpp for braking algorithm implementation
 */
#ifndef MODE_BRAKE_ENABLED
# define MODE_BRAKE_ENABLED 1
#endif

/**
 * @brief Enable Circle flight mode
 * 
 * @details Flies vehicle in a horizontal circle around a central point at
 *          configurable radius and rate. Useful for reconnaissance, aerial
 *          photography of structures, and maintaining visual contact with target.
 * 
 * Default: 1 (enabled)
 * 
 * Features:
 * - Configurable circle radius
 * - Adjustable rotation rate (clockwise/counterclockwise)
 * - Altitude maintained automatically
 * - Circle center can be moved by pilot input
 * 
 * @warning Circle mode is required by AUTO mode for DO_CIRCLE mission commands.
 *          Disabling Circle will cause AUTO mode compilation to fail.
 * 
 * @note Useful for orbiting points of interest. Memory-constrained builds can
 *       only disable this if AUTO mode is also disabled (~3-4 KB savings).
 * 
 * @see mode_circle.cpp for orbit control implementation
 */
#ifndef MODE_CIRCLE_ENABLED
# define MODE_CIRCLE_ENABLED 1
#endif

/**
 * @brief Enable Drift (coordinated turn) flight mode
 * 
 * @details Specialized mode providing aircraft-like coordinated turns while
 *          maintaining altitude. Roll stick commands turn rate, pitch controls
 *          forward speed.
 * 
 * Default: 1 (enabled)
 * 
 * Flight characteristics:
 * - Roll stick controls yaw rate (not roll angle)
 * - Pitch stick controls forward/backward velocity
 * - Vehicle banks into turns automatically (coordinated)
 * - Altitude maintained automatically
 * - More intuitive for pilots with airplane experience
 * 
 * @note Specialized mode useful for aerial photography with smooth panning.
 *       Can be disabled on most builds to save ~2-3 KB flash without losing
 *       essential functionality.
 * 
 * @see mode_drift.cpp for coordinated turn implementation
 */
#ifndef MODE_DRIFT_ENABLED
# define MODE_DRIFT_ENABLED 1
#endif

/**
 * @brief Enable Flip (acrobatic flip) flight mode
 * 
 * @details Performs automated flip maneuvers in roll or pitch axis. Vehicle
 *          completes a full 360-degree rotation then returns to level flight.
 * 
 * Default: 1 (enabled)
 * 
 * Safety features:
 * - Requires minimum altitude before flip (configurable)
 * - Automatically recovers to level flight
 * - Altitude maintained during recovery
 * - Motors at maximum thrust during flip for energy
 * 
 * @note Aerobatic feature useful for demonstrations and FPV flying. Can be
 *       safely disabled on professional/commercial builds to save ~2-3 KB flash.
 *       Not suitable for vehicles carrying payloads or gimbal-mounted cameras.
 * 
 * @see mode_flip.cpp for flip maneuver implementation
 */
#ifndef MODE_FLIP_ENABLED
# define MODE_FLIP_ENABLED 1
#endif

/**
 * @brief Enable Follow flight mode
 * 
 * @details Automatically follows another vehicle or ground station by receiving
 *          position updates via MAVLink and maintaining configured offset position.
 * 
 * Default: Conditional (enabled only if AP_FOLLOW_ENABLED && AP_AVOIDANCE_ENABLED)
 * 
 * Features:
 * - Follows target vehicle maintaining configurable offset (distance/angle/height)
 * - Integrates with avoidance system for obstacle detection
 * - Adjustable following distance and height offset
 * - Compatible with multiple vehicle types as targets
 * 
 * Dependencies:
 * - Requires AP_Follow library (AP_FOLLOW_ENABLED)
 * - Requires AP_Avoidance library (AP_AVOIDANCE_ENABLED)
 * - Requires GUIDED mode (dependency check at end of file)
 * 
 * @note Useful for multi-vehicle operations, camera ships following lead vehicles,
 *       and autonomous tracking applications. Automatically disabled if dependencies
 *       are not available (~5-7 KB when enabled).
 * 
 * @see mode_follow.cpp for follow controller implementation
 * @see AP_Follow library for target tracking logic
 */
#ifndef MODE_FOLLOW_ENABLED
#if AP_FOLLOW_ENABLED && AP_AVOIDANCE_ENABLED
#define MODE_FOLLOW_ENABLED 1
#else
#define MODE_FOLLOW_ENABLED 0
#endif
#endif

/**
 * @brief Enable Guided flight mode
 * 
 * @details Allows ground station or companion computer to command vehicle position,
 *          velocity, or attitude in real-time. Essential for interactive control
 *          and advanced autonomous applications.
 * 
 * Default: 1 (enabled)
 * 
 * Capabilities:
 * - Accept position targets (global or local coordinates)
 * - Accept velocity targets (NED frame)
 * - Accept attitude targets with thrust
 * - Support precision landing and guided takeoff
 * - Enable ADSB avoidance maneuvers
 * - Allow external path planning integration
 * 
 * @warning GUIDED mode is required by multiple other modes and systems:
 *          - AUTO mode (for guided mission commands)
 *          - FOLLOW mode
 *          - ADSB collision avoidance
 *          Disabling will cause compilation errors if dependencies enabled.
 * 
 * @warning GUIDED mode is a critical safety mode. It should only be disabled
 *          on highly memory-constrained builds that also disable all dependent
 *          features.
 * 
 * @note Core mode for computer vision navigation, ROS integration, and
 *       interactive ground station control (~5-8 KB flash).
 * 
 * @see mode_guided.cpp for guided controller implementation
 */
#ifndef MODE_GUIDED_ENABLED
# define MODE_GUIDED_ENABLED 1
#endif

/**
 * @brief Enable Guided-NoGPS flight mode
 * 
 * @details Variant of Guided mode that works without GPS, accepting attitude
 *          and thrust commands for indoor flight or GPS-denied environments.
 * 
 * Default: 1 (enabled)
 * 
 * Features:
 * - Attitude control from external source (no position control)
 * - Works without GPS or position estimate
 * - Useful for indoor flight with external positioning systems
 * - Compatible with optical flow sensors
 * 
 * Dependencies:
 * - Requires GUIDED mode (dependency check at end of file)
 * 
 * @note Enables indoor autonomous flight when paired with external positioning
 *       (motion capture, UWB, etc.). Can be disabled if only outdoor GPS flight
 *       needed (~2-3 KB savings).
 * 
 * @see mode_guided_nogps.cpp for GPS-free guided implementation
 */
#ifndef MODE_GUIDED_NOGPS_ENABLED
# define MODE_GUIDED_NOGPS_ENABLED 1
#endif

/**
 * @brief Enable Loiter flight mode
 * 
 * @details GPS-based position hold mode. Vehicle maintains current GPS position
 *          and altitude automatically, with pilot able to override temporarily.
 * 
 * Default: 1 (enabled)
 * 
 * Behavior:
 * - Holds GPS position automatically
 * - Altitude maintained with barometer + GPS fusion
 * - Pilot stick input temporarily moves vehicle
 * - Returns to hold position when sticks centered
 * - Wind compensation automatically applied
 * 
 * @note Essential mode for GPS-based multicopters. Provides stable hover with
 *       minimal pilot workload. Should remain enabled on all GPS-equipped
 *       vehicles. Memory savings from disabling minimal (~3-4 KB).
 * 
 * @note Loiter is the basis for many advanced modes including Auto, Guided,
 *       and RTL. While technically can be disabled independently, it's
 *       recommended to keep enabled.
 * 
 * @see mode_loiter.cpp for position hold implementation
 * @see AC_PosControl library for position controller
 */
#ifndef MODE_LOITER_ENABLED
# define MODE_LOITER_ENABLED 1
#endif

/**
 * @brief Enable PosHold (Position Hold) flight mode
 * 
 * @details Alternative to Loiter with different stick response characteristics.
 *          Provides more airplane-like feel with "brake" behavior when sticks
 *          return to center.
 * 
 * Default: 1 (enabled)
 * 
 * Behavior differences from Loiter:
 * - Sticks control velocity (not position offset)
 * - Aggressive braking when sticks centered
 * - More responsive to pilot input
 * - Feels more like airplane flying than multicopter hovering
 * 
 * @note Specialized variant of position hold. Can be disabled in favor of
 *       Loiter on most builds (~3-4 KB savings). Preferred by some pilots for
 *       aerial photography due to smoother stop behavior.
 * 
 * @see mode_poshold.cpp for position hold with brake implementation
 */
#ifndef MODE_POSHOLD_ENABLED
# define MODE_POSHOLD_ENABLED 1
#endif

/**
 * @brief Enable RTL (Return To Launch) flight mode
 * 
 * @details Autonomous return to launch position with automatic landing. Critical
 *          failsafe mode triggered by lost radio link, low battery, or manual
 *          selection.
 * 
 * Default: 1 (enabled)
 * 
 * Behavior sequence:
 * 1. Climb to RTL altitude (if below)
 * 2. Fly directly to home position
 * 3. Loiter above home for configured time
 * 4. Descend and land automatically
 * 
 * Configurable parameters:
 * - RTL_ALT: Return altitude (default 15m)
 * - RTL_CLIMB_MIN: Minimum initial climb
 * - RTL_CONE_SLOPE: Gradual descent cone
 * - RTL_LOITER_TIME: Loiter time before descent
 * 
 * @warning RTL is a critical safety mode used by multiple failsafes:
 *          - Radio failsafe (lost RC link)
 *          - Battery failsafe (low battery)
 *          - GCS failsafe (lost telemetry)
 *          - Geofence breach action
 *          - EKF failsafe (when configured)
 * 
 * @warning Disabling RTL mode removes a critical safety recovery method.
 *          Only disable if alternative failsafe actions configured (LAND)
 *          and AUTO mode also disabled (requires RTL).
 * 
 * @note Essential safety feature that should remain enabled on virtually all
 *       builds. Required by AUTO mode.
 * 
 * @see mode_rtl.cpp for return-to-launch implementation
 */
#ifndef MODE_RTL_ENABLED
# define MODE_RTL_ENABLED 1
#endif

/**
 * @brief Enable SmartRTL (Smart Return To Launch) flight mode
 * 
 * @details Intelligent return to launch that retraces the vehicle's actual flight
 *          path (with loop elimination) rather than flying direct. Safer when
 *          obstacles exist between current position and home.
 * 
 * Default: 1 (enabled)
 * 
 * Features:
 * - Records "breadcrumb" path during flight
 * - Eliminates loops for direct return via safe path
 * - Falls back to RTL if path memory full
 * - Avoids flying through obstacles encountered during outbound flight
 * - Configurable memory allocation for path storage
 * 
 * Advantages over standard RTL:
 * - Safer in environments with obstacles
 * - Retraces known-safe path
 * - Useful in urban environments, forests, indoor spaces
 * 
 * Dependencies:
 * - Requires RTL mode (falls back when path not available)
 * - Dependency check at end of file
 * 
 * @note Advanced safety feature useful for beyond-visual-line-of-sight operations
 *       and complex environments. Can be disabled to save ~5-7 KB flash if flying
 *       in open areas where direct RTL is always safe.
 * 
 * @see mode_smartrtl.cpp for smart return implementation
 * @see AP_SmartRTL library for path recording and management
 */
#ifndef MODE_SMARTRTL_ENABLED
# define MODE_SMARTRTL_ENABLED 1
#endif

/**
 * @brief Enable Sport flight mode
 * 
 * @details Rate-controlled mode with earth-frame leveling. Similar to Acro mode
 *          but with automatic leveling when sticks centered. Provides aggressive
 *          rate control with safety of automatic leveling.
 * 
 * Default: 0 (disabled by default due to low usage)
 * 
 * Characteristics:
 * - Rate control on roll and pitch axes (like Acro)
 * - Automatic leveling when sticks centered (like Stabilize)
 * - No altitude hold (pilot controls throttle directly)
 * - Earth-frame rate control (not body-frame like Acro)
 * - Responsive feel with built-in safety
 * 
 * @note Specialized mode rarely used. Disabled by default to save flash memory
 *       (~3 KB). Enable if pilots prefer rate control with auto-leveling for
 *       aggressive flight.
 * 
 * @see mode_sport.cpp for sport mode implementation
 */
#ifndef MODE_SPORT_ENABLED
# define MODE_SPORT_ENABLED 0
#endif

/**
 * @brief Enable System Identification flight mode
 * 
 * @details Specialized mode for automated system identification testing. Injects
 *          test signals into control loops and logs responses for frequency
 *          analysis and controller tuning.
 * 
 * Default: Conditional (enabled only if HAL_LOGGING_ENABLED)
 * 
 * Capabilities:
 * - Frequency sweep testing
 * - Step response analysis
 * - Multi-axis simultaneous testing
 * - Automated test signal generation
 * - High-rate logging for analysis
 * 
 * Usage:
 * - Research and development
 * - Advanced controller tuning
 * - System characterization
 * - Validation of vehicle models
 * 
 * Dependencies:
 * - Requires logging system (HAL_LOGGING_ENABLED)
 * - Only available on hardware with sufficient logging capabilities
 * 
 * @warning Advanced mode for developers and researchers only. Should not be
 *          used in normal flight operations. Test signals can cause unexpected
 *          vehicle behavior.
 * 
 * @note Automatically disabled on boards without logging support to save flash.
 *       Typically 4-6 KB when enabled.
 * 
 * @see mode_systemid.cpp for system identification implementation
 */
#ifndef MODE_SYSTEMID_ENABLED
# define MODE_SYSTEMID_ENABLED HAL_LOGGING_ENABLED
#endif

/**
 * @brief Enable Throw flight mode
 * 
 * @details Allows vehicle to be started by throwing into the air. Motors remain
 *          disarmed until vehicle detects being thrown, then auto-arms and
 *          stabilizes. Useful for hand-launched operations.
 * 
 * Default: 1 (enabled)
 * 
 * Operation sequence:
 * 1. Select Throw mode with motors disarmed
 * 2. Wait for "Ready to throw" message
 * 3. Throw vehicle upward (must reach threshold velocity)
 * 4. Vehicle detects throw, arms, and stabilizes
 * 5. Transitions to altitude hold automatically
 * 
 * Safety features:
 * - Multiple detection thresholds (velocity, acceleration, free-fall)
 * - Timeout reverts to disarmed if throw not detected
 * - Automatic stabilization after throw detection
 * - Configurable velocity and acceleration thresholds
 * 
 * @warning Requires practice and understanding of throw detection thresholds.
 *          Vehicle must reach configured velocity (default 5 m/s) to detect throw.
 *          Inadequate throw results in drop to ground.
 * 
 * @note Useful for operations where traditional arming/takeoff not practical
 *       (boat launches, limited space). Can be disabled if not needed (~3-4 KB).
 * 
 * @see mode_throw.cpp for throw mode implementation
 * @see THROW_HIGH_SPEED, THROW_VERTICAL_SPEED configuration below
 */
#ifndef MODE_THROW_ENABLED
# define MODE_THROW_ENABLED 1
#endif

/**
 * @brief Enable ZigZag flight mode
 * 
 * @details Semi-autonomous mode for automated area coverage in zigzag pattern.
 *          Pilot sets Point A and Point B, vehicle flies automated zigzag pattern
 *          between them with configurable spacing.
 * 
 * Default: 1 (enabled)
 * 
 * Operation:
 * 1. Fly to first corner, save as Point A
 * 2. Fly to second corner, save as Point B
 * 3. Vehicle flies automated zigzag pattern
 * 4. Configurable line spacing perpendicular to AB line
 * 5. Manual or automatic return when pattern complete
 * 
 * Applications:
 * - Agricultural crop spraying
 * - Area surveying and mapping
 * - Search patterns
 * - Systematic area coverage
 * 
 * @note Useful for precision agriculture and survey operations. Can be disabled
 *       if systematic coverage not needed (~4-5 KB savings).
 * 
 * @see mode_zigzag.cpp for zigzag pattern implementation
 */
#ifndef MODE_ZIGZAG_ENABLED
# define MODE_ZIGZAG_ENABLED 1
#endif

/**
 * @brief Enable Turtle flight mode
 * 
 * @details Recovery mode allowing pilot to flip vehicle back over after crash
 *          by reversing motor directions. Vehicle inverted after crash can
 *          self-right using motor thrust.
 * 
 * Default: Conditional (enabled only for DSHOT ESCs on non-helicopter frames)
 * 
 * Requirements:
 * - DSHOT ESC protocol (HAL_DSHOT_ENABLED)
 * - Non-helicopter frame (FRAME_CONFIG != HELI_FRAME)
 * - ESCs must support bidirectional DSHOT
 * 
 * Operation:
 * 1. Vehicle crashes and flips upside down
 * 2. Switch to Turtle mode
 * 3. Use roll/pitch sticks to apply directed thrust
 * 4. Vehicle flips back to upright orientation
 * 5. Switch to normal flight mode and continue
 * 
 * @warning Only works with bidirectional DSHOT ESCs. Attempting with non-DSHOT
 *          ESCs will fail. Not compatible with traditional helicopter frames.
 * 
 * @note Racing/freestyle feature for rapid crash recovery. Automatically disabled
 *       on incompatible hardware. Useful for preventing manual recovery in racing
 *       scenarios (~2-3 KB when enabled).
 * 
 * @see mode_turtle.cpp for turtle/flip recovery implementation
 */
#ifndef MODE_TURTLE_ENABLED
# define MODE_TURTLE_ENABLED HAL_DSHOT_ENABLED && FRAME_CONFIG != HELI_FRAME
#endif

/**
 * @brief Enable Flowhold flight mode
 * 
 * @details Position hold mode using optical flow sensor instead of GPS. Enables
 *          stable hover in GPS-denied environments (indoors, under tree canopy).
 * 
 * Default: Conditional (enabled only if AP_OPTICALFLOW_ENABLED)
 * 
 * Features:
 * - Position hold without GPS
 * - Uses optical flow sensor for velocity estimation
 * - Altitude hold using barometer or rangefinder
 * - Suitable for indoor flight
 * - Automatic compensation for surface texture and lighting
 * 
 * Requirements:
 * - Optical flow sensor (PX4Flow, Cheerson CX-OF, etc.)
 * - Downward-facing rangefinder (for accurate altitude)
 * - AP_OpticalFlow library enabled
 * 
 * Limitations:
 * - Requires textured surface below (not smooth/featureless)
 * - Limited operating height range (rangefinder dependent)
 * - Can drift over time without absolute position reference
 * 
 * @note Enables indoor flight capability. Automatically disabled if optical flow
 *       library not available. Essential for indoor autonomous operations
 *       (~3-4 KB when enabled).
 * 
 * @see mode_flowhold.cpp for optical flow hold implementation
 * @see AP_OpticalFlow library for flow sensor integration
 */
#ifndef MODE_FLOWHOLD_ENABLED
# define MODE_FLOWHOLD_ENABLED AP_OPTICALFLOW_ENABLED
#endif

/**
 * @brief Enable Weathervane yaw control feature
 * 
 * @details Automatic yaw heading adjustment to point vehicle into wind during
 *          AUTO and GUIDED mode operations. Reduces wind-induced position drift
 *          by minimizing cross-sectional area exposed to wind.
 * 
 * Default: 1 (enabled)
 * 
 * Functionality:
 * - Automatically yaws vehicle to point into estimated wind direction
 * - Active during AUTO, GUIDED, and ZIGZAG modes
 * - Configurable aggressiveness and enable/disable per flight
 * - Uses wind estimation from navigation system
 * - Pilot yaw input temporarily overrides weathervaning
 * 
 * Benefits:
 * - Improved position hold accuracy in wind
 * - Reduced power consumption (less tilt needed to counter drift)
 * - More stable platform for photography/surveying
 * - Better handling of asymmetric airframes
 * 
 * Configurable parameters:
 * - WVANE_ENABLE: Runtime enable/disable
 * - WVANE_ANG_MIN: Minimum wind speed to activate
 * - WVANE_GAIN: Yaw controller aggressiveness
 * 
 * @note Useful for most applications, particularly in windy conditions.
 *       Small flash savings (~2 KB) if disabled but recommended to keep enabled.
 * 
 * @see Weathervane.cpp for wind-compensating yaw implementation
 */
#ifndef WEATHERVANE_ENABLED
# define WEATHERVANE_ENABLED 1
#endif

//////////////////////////////////////////////////////////////////////////////

/**
 * @brief Enable Autorotate flight mode (helicopters only)
 * 
 * @details Autonomous autorotation mode for traditional helicopters experiencing
 *          power loss. Automatically manages rotor RPM and descent profile to
 *          enable safe unpowered landing.
 * 
 * Default: Conditional (enabled only for HELI_FRAME in SITL simulation)
 * 
 * Autorotation sequence:
 * 1. Detect power loss or manual mode entry
 * 2. Lower collective to maintain rotor RPM
 * 3. Manage forward speed for optimal glide
 * 4. Navigate toward suitable landing area
 * 5. Execute flare maneuver before touchdown
 * 6. Cushion landing with collective increase
 * 
 * Features:
 * - Automated entry on power loss detection
 * - Rotor RPM management via collective control
 * - Configurable descent profile
 * - Flare timing and aggressiveness control
 * - Compatible with traditional helicopter dynamics
 * 
 * Build configuration:
 * - Only compiled for HELI_FRAME configuration
 * - Currently enabled only in SITL for development/testing
 * - Disabled on hardware builds (still in development)
 * 
 * @warning Experimental feature for traditional helicopters only. Not applicable
 *          to multicopters or other frame types. Requires thorough testing in
 *          SITL before hardware validation.
 * 
 * @warning Real-world autorotation is extremely complex and dangerous. This mode
 *          is under active development and not recommended for production use
 *          without extensive testing and validation.
 * 
 * @note Specialized helicopter emergency procedure automation. Automatically
 *       disabled on non-helicopter frames and non-SITL builds. Development feature
 *       (~5-7 KB when enabled).
 * 
 * @see mode_autorotate.cpp for autonomous autorotation implementation
 * @see AC_Autorotation library for autorotation controller
 */
#ifndef MODE_AUTOROTATE_ENABLED
#if CONFIG_HAL_BOARD == HAL_BOARD_SITL
    #if FRAME_CONFIG == HELI_FRAME
        #ifndef MODE_AUTOROTATE_ENABLED
        # define MODE_AUTOROTATE_ENABLED 1
        #endif
    #else
        # define MODE_AUTOROTATE_ENABLED 0
    #endif
#else
    # define MODE_AUTOROTATE_ENABLED 0
#endif
#endif

//////////////////////////////////////////////////////////////////////////////
// RADIO CONFIGURATION
//////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////


/**
 * @brief Default flight mode channel assignments
 * 
 * @details Defines the default flight modes assigned to the 6 positions of the
 *          flight mode switch (typically a 6-position switch on channel 5).
 *          These are compile-time defaults that can be overridden via parameters.
 * 
 * Default: All positions set to Mode::Number::STABILIZE
 * 
 * Available modes (if compiled in):
 * - STABILIZE: Rate-stabilized flight with manual throttle
 * - ALT_HOLD: Altitude hold with stabilization
 * - LOITER: GPS position and altitude hold
 * - AUTO: Autonomous waypoint missions
 * - RTL: Return to launch and land
 * - GUIDED: External computer control
 * - ACRO: Rate control without stabilization
 * - SPORT, DRIFT, FLIP, THROW, etc.
 * 
 * Configuration at runtime:
 * - FLTMODE1 through FLTMODE6 parameters override these defaults
 * - Ground station can assign any enabled mode to any switch position
 * - Mode availability determined by MODE_*_ENABLED flags
 * 
 * @note Setting all defaults to STABILIZE ensures safe out-of-box experience.
 *       Users typically configure their preferred modes via parameters after
 *       initial setup. These compile-time defaults rarely need modification.
 * 
 * @see Parameters.cpp for runtime flight mode parameter definitions
 * @see mode.h for Mode::Number enumeration
 */
#ifndef FLIGHT_MODE_1
 # define FLIGHT_MODE_1                  Mode::Number::STABILIZE
#endif
#ifndef FLIGHT_MODE_2
 # define FLIGHT_MODE_2                  Mode::Number::STABILIZE
#endif
#ifndef FLIGHT_MODE_3
 # define FLIGHT_MODE_3                  Mode::Number::STABILIZE
#endif
#ifndef FLIGHT_MODE_4
 # define FLIGHT_MODE_4                  Mode::Number::STABILIZE
#endif
#ifndef FLIGHT_MODE_5
 # define FLIGHT_MODE_5                  Mode::Number::STABILIZE
#endif
#ifndef FLIGHT_MODE_6
 # define FLIGHT_MODE_6                  Mode::Number::STABILIZE
#endif


/**
 * @brief Default throttle failsafe trigger value
 * 
 * @details PWM value (in microseconds) below which radio failsafe is triggered.
 *          When receiver loses signal, throttle channel typically drops to this
 *          value or goes to zero, triggering failsafe actions.
 * 
 * Default: 975 microseconds
 * 
 * Typical RC PWM ranges:
 * - Normal operation: 1000-2000 μs
 * - Low throttle: 1000 μs
 * - Failsafe threshold: 975 μs (below normal range)
 * - Lost signal: Often 0 μs or <900 μs
 * 
 * Failsafe behavior:
 * - When throttle PWM < FS_THR_VALUE_DEFAULT for FS_TIMEOUT period:
 *   1. Vehicle enters radio failsafe
 *   2. Executes configured failsafe action (usually RTL or LAND)
 *   3. Ignores further pilot input until signal recovers
 * 
 * @warning Critical safety parameter. Value must be set below lowest normal
 *          throttle value but above interference/noise floor. Incorrect setting
 *          can cause false failsafe triggers or failure to detect real signal loss.
 * 
 * @note Most modern receivers output ~975μs or 0μs when signal lost. This default
 *       works for majority of systems. Verify with your specific receiver.
 * 
 * @see FS_THR_ENABLE parameter for failsafe enable/action configuration
 * @see radio.cpp for radio failsafe detection logic
 */
#ifndef FS_THR_VALUE_DEFAULT
 # define FS_THR_VALUE_DEFAULT             975
#endif

/**
 * @brief Default pilot-initiated takeoff target altitude
 * 
 * @details Final altitude (in centimeters above home) for pilot-initiated
 *          automatic takeoff using RC switch or ground station command.
 * 
 * Default: 0 cm (use PILOT_TKOFF_DZ parameter value instead)
 * 
 * Behavior:
 * - When pilot triggers takeoff (mode switch or button):
 *   1. Vehicle auto-arms if armed checks pass
 *   2. Motors spin up to takeoff throttle
 *   3. Vehicle climbs to this altitude
 *   4. Holds position at target altitude
 * 
 * - Value of 0: Uses PILOT_TKOFF_DZ parameter (default 250cm = 2.5m)
 * - Non-zero value: Overrides parameter default
 * 
 * @note Automatic takeoff feature provides consistent, safe launch behavior.
 *       Most users configure desired altitude via PILOT_TKOFF_DZ parameter
 *       rather than compile-time default.
 * 
 * @see takeoff.cpp for automatic takeoff implementation
 * @see PILOT_TKOFF_DZ parameter for runtime altitude configuration
 */
#ifndef PILOT_TKOFF_ALT_DEFAULT
 # define PILOT_TKOFF_ALT_DEFAULT           0     // default final alt above home for pilot initiated takeoff
#endif


/**
 * @brief Landing behavior configuration
 * 
 * @details Controls automatic landing sequence parameters including descent rates,
 *          pilot override capabilities, failsafe behaviors, and rangefinder usage.
 */

/**
 * @brief Final landing descent speed
 * 
 * Default: 50 cm/s (0.5 m/s)
 * Units: Centimeters per second
 * 
 * @details Vertical descent speed during the final landing phase after vehicle
 *          detects ground proximity. Slower than initial descent for gentle touchdown.
 * 
 * @note Conservative default ensures soft landing. Can be increased for heavy
 *       vehicles or decreased for sensitive payloads via LAND_SPEED parameter.
 */
#ifndef LAND_SPEED
 # define LAND_SPEED    50          // the descent speed for the final stage of landing in cm/s
#endif

/**
 * @brief Allow pilot repositioning during landing
 * 
 * Default: 1 (enabled)
 * 
 * @details Allows pilot to adjust horizontal position during automatic landing
 *          using roll/pitch stick inputs. Useful for avoiding obstacles or
 *          adjusting final touchdown point.
 * 
 * @note Pilot override ends when landing completes. Setting to 0 creates fully
 *       automated landing with no pilot horizontal control.
 */
#ifndef LAND_REPOSITION_DEFAULT
 # define LAND_REPOSITION_DEFAULT   1   // by default the pilot can override roll/pitch during landing
#endif

/**
 * @brief Failsafe land-with-delay timer
 * 
 * Default: 4000 milliseconds (4 seconds)
 * Units: Milliseconds
 * 
 * @details Delay before initiating landing when land-with-delay failsafe action
 *          is triggered. Gives pilot time to recognize failsafe and potentially
 *          recover control.
 * 
 * @warning Safety-critical parameter. Delay allows recovery from false failsafe
 *          triggers but extends time before emergency landing begins.
 * 
 * @note Used by some failsafe actions to provide warning before forcing landing.
 *       4-second default balances recovery opportunity against safety.
 */
#ifndef LAND_WITH_DELAY_MS
 # define LAND_WITH_DELAY_MS        4000    // default delay (in milliseconds) when a land-with-delay is triggered during a failsafe event
#endif

/**
 * @brief Throttle threshold to cancel landing
 * 
 * Default: 700 (PWM microseconds)
 * Units: Microseconds (PWM pulse width)
 * 
 * @details Throttle stick position above which pilot can cancel automatic landing
 *          and regain manual control. Prevents accidental cancellation while
 *          allowing deliberate abort.
 * 
 * Typical RC ranges:
 * - Throttle low: ~1000μs
 * - Mid-stick: ~1500μs
 * - Threshold: 700 (requires significant stick movement)
 * 
 * @warning Setting too low may cause accidental landing cancellation from
 *          minor stick movements. Setting too high makes intentional cancel difficult.
 * 
 * @note 700 value requires deliberate upward throttle input, preventing
 *       accidental cancellation while allowing emergency abort.
 */
#ifndef LAND_CANCEL_TRIGGER_THR
 # define LAND_CANCEL_TRIGGER_THR   700     // land is cancelled by input throttle above 700
#endif

/**
 * @brief Minimum altitude for rangefinder use in landing
 * 
 * Default: 200 cm (2 meters)
 * Units: Centimeters
 * 
 * @details Altitude below which rangefinder (rather than barometer) is used for
 *          altitude estimation during landing. Provides more accurate ground
 *          distance measurement near surface.
 * 
 * @note Rangefinder accuracy improves landing precision on uneven terrain.
 *       Automatic switching from barometer to rangefinder provides seamless
 *       transition.
 */
#ifndef LAND_RANGEFINDER_MIN_ALT_CM
#define LAND_RANGEFINDER_MIN_ALT_CM 200
#endif

/**
 * @brief Landing detector configuration
 * 
 * @details Configures the landing detector that determines when vehicle has
 *          touched down. Uses accelerometer and velocity thresholds with timing
 *          requirements to distinguish landing from other low-thrust conditions.
 * 
 * Landing detection prevents:
 * - Motors disarming mid-flight during low throttle maneuvers
 * - Tip-over from trying to maintain position on ground
 * - Delayed motor shutdown after landing
 * 
 * Detection criteria (all must be satisfied):
 * - Low vertical velocity (< LAND_DETECTOR_VEL_Z_MAX)
 * - Low vertical acceleration (< LAND_DETECTOR_ACCEL_MAX)
 * - Throttle at minimum
 * - Conditions held for LAND_DETECTOR_TRIGGER_SEC
 */

/**
 * @brief Time to confirm landing
 * 
 * Default: 1.0 seconds
 * Units: Seconds
 * 
 * @details Duration that landing conditions must be continuously satisfied before
 *          vehicle is considered landed. Prevents false detection during low
 *          altitude flight or momentary ground contact.
 * 
 * @warning Safety-critical parameter. Too short causes premature motor shutdown
 *          (crash risk). Too long delays disarm after landing (tip-over risk).
 * 
 * @note 1 second balances quick disarm after landing against false triggers
 *       during slow descent or ground effect hovering.
 */
#ifndef LAND_DETECTOR_TRIGGER_SEC
 # define LAND_DETECTOR_TRIGGER_SEC         1.0f    // number of seconds to detect a landing
#endif

/**
 * @brief Time to confirm landing in air mode
 * 
 * Default: 3.0 seconds
 * Units: Seconds
 * 
 * @details Extended landing detection time when air mode (motors-always-on) is
 *          active. Longer timeout prevents disarm while motors still providing
 *          attitude control on ground.
 * 
 * @note Air mode keeps motors spinning even at zero throttle for improved attitude
 *       authority. Requires longer landing confirmation to ensure stable ground contact.
 */
#ifndef LAND_AIRMODE_DETECTOR_TRIGGER_SEC
 # define LAND_AIRMODE_DETECTOR_TRIGGER_SEC 3.0f    // number of seconds to detect a landing in air mode
#endif

/**
 * @brief Time to indicate possible landing
 * 
 * Default: 0.2 seconds
 * Units: Seconds
 * 
 * @details Duration after which vehicle "might be landed." Used to reset horizontal
 *          position targets to prevent vehicle trying to correct position while
 *          on ground (reduces tip-over risk).
 * 
 * @note Shorter than full landing confirmation. Allows position controller to
 *       relax before full landing detected, improving landing stability.
 */
#ifndef LAND_DETECTOR_MAYBE_TRIGGER_SEC
 # define LAND_DETECTOR_MAYBE_TRIGGER_SEC   0.2f    // number of seconds that means we might be landed (used to reset horizontal position targets to prevent tipping over)
#endif

/**
 * @brief Landing detector accelerometer filter cutoff
 * 
 * Default: 1.0 Hz
 * Units: Hertz
 * 
 * @details Low-pass filter frequency for accelerometer data in landing detector.
 *          Filters high-frequency vibrations while preserving landing dynamics.
 * 
 * @note 1 Hz cutoff removes motor/propeller vibrations while detecting the low
 *       acceleration characteristic of ground contact.
 */
#ifndef LAND_DETECTOR_ACCEL_LPF_CUTOFF
# define LAND_DETECTOR_ACCEL_LPF_CUTOFF     1.0f    // frequency cutoff of land detector accelerometer filter
#endif

/**
 * @brief Maximum acceleration for landed state
 * 
 * Default: 1.0 m/s²
 * Units: Meters per second squared
 * 
 * @details Maximum vertical acceleration considered consistent with landed state.
 *          Higher acceleration indicates flight or unstable ground contact.
 * 
 * @note 1 m/s² threshold (about 0.1g) captures vibrations and minor movements
 *       while rejecting flight conditions. Ground vibrations typically < 0.5 m/s².
 */
#ifndef LAND_DETECTOR_ACCEL_MAX
# define LAND_DETECTOR_ACCEL_MAX            1.0f    // vehicle acceleration must be under 1m/s/s
#endif

/**
 * @brief Maximum velocity for landed state
 * 
 * Default: 1.0 m/s
 * Units: Meters per second (vertical)
 * 
 * @details Maximum vertical velocity considered consistent with landed state.
 *          Higher velocity indicates descent or ascent (not landed).
 * 
 * @note 1 m/s threshold allows detection during final descent phase while
 *       rejecting mid-flight conditions. Typical landing speed is 0.5 m/s.
 */
#ifndef LAND_DETECTOR_VEL_Z_MAX
# define LAND_DETECTOR_VEL_Z_MAX              1.0f    // vehicle vertical velocity must be under 1m/s
#endif

/**
 * @brief Flight mode-specific parameter defaults
 * 
 * @details Default values for mode-specific parameters. These compile-time defaults
 *          can be overridden by runtime parameters for per-vehicle customization.
 */

/**
 * @brief Acro Trainer mode maximum lean angle
 * 
 * Default: 30 degrees (radians(30.0))
 * Units: Radians
 * 
 * @details Maximum lean angle allowed in Acro Trainer mode. When pilot input
 *          would exceed this angle, trainer automatically limits bank angle,
 *          providing training wheels for acrobatic flight.
 * 
 * Acro Trainer levels:
 * - Level 0: No limits (full acro)
 * - Level 1: Limits angle to this value
 * - Level 2: Auto-levels when sticks centered
 * 
 * @note 30-degree limit provides safety margin for new acro pilots while allowing
 *       aggressive maneuvering. Can be increased via ACRO_TRAINER parameter.
 * 
 * @see mode_acro.cpp for acro trainer implementation
 */
#ifndef ACRO_LEVEL_MAX_ANGLE_RAD
 # define ACRO_LEVEL_MAX_ANGLE_RAD      radians(30.0)   // maximum lean angle in trainer mode measured in radians
#endif

#ifdef ACRO_LEVEL_MAX_ANGLE
#error "Please update your hwdef to use ACRO_LEVEL_MAX_ANGLE_RAD, not ACRO_LEVEL_MAX_ANGLE"
#endif // ACRO_LEVEL_MAX_ANGLE

/**
 * @brief Acro Trainer maximum angle overshoot
 * 
 * Default: 10 degrees (radians(10.0))
 * Units: Radians
 * 
 * @details Maximum overshoot beyond ACRO_LEVEL_MAX_ANGLE_RAD when pilot holds
 *          full stick deflection. Allows brief angle excursion for more natural
 *          feel while maintaining safety limits.
 * 
 * @note 10-degree overshoot prevents abrupt stops at angle limit, providing
 *       smoother trainer mode behavior.
 */
#ifndef ACRO_LEVEL_MAX_OVERSHOOT_RAD
 # define ACRO_LEVEL_MAX_OVERSHOOT_RAD  radians(10.0) // maximum overshoot angle in trainer mode when full roll or pitch stick is held in radians
#endif

#ifdef ACRO_LEVEL_MAX_OVERSHOOT
#error "Please update your hwdef to use ACRO_LEVEL_MAX_OVERSHOOT_RAD, not ACRO_LEVEL_MAX_OVERSHOOT"
#endif // ACRO_LEVEL_MAX_OVERSHOOT

/**
 * @brief Acro mode roll axis balance
 * 
 * Default: 1.0 (no compensation)
 * Units: Dimensionless multiplier
 * 
 * @details Adjusts roll rate response to compensate for asymmetric motor thrust
 *          or aerodynamic effects. Values >1.0 increase roll authority, <1.0 decrease.
 * 
 * @note Typically left at 1.0 unless specific airframe asymmetry requires compensation.
 */
#ifndef ACRO_BALANCE_ROLL
 #define ACRO_BALANCE_ROLL          1.0f
#endif

/**
 * @brief Acro mode pitch axis balance
 * 
 * Default: 1.0 (no compensation)
 * Units: Dimensionless multiplier
 * 
 * @details Adjusts pitch rate response to compensate for fore/aft weight imbalance
 *          or aerodynamic effects. Values >1.0 increase pitch authority, <1.0 decrease.
 * 
 * @note Useful for vehicles with forward-mounted cameras or asymmetric payloads.
 */
#ifndef ACRO_BALANCE_PITCH
 #define ACRO_BALANCE_PITCH         1.0f
#endif

/**
 * @brief Acro mode roll/pitch expo default
 * 
 * Default: 0.3 (30% exponential)
 * Units: Dimensionless (0.0 to 1.0)
 * Range: 0.0 (linear) to 1.0 (maximum expo)
 * 
 * @details Exponential curve applied to roll/pitch stick input in Acro mode.
 *          Reduces sensitivity at center stick for fine control, increases at
 *          extremes for maximum rate.
 * 
 * Expo curve effects:
 * - 0.0: Linear response (direct stick-to-rate)
 * - 0.3: Moderate expo (smooth center, aggressive ends) - default
 * - 0.6: Strong expo (very gentle center)
 * - 1.0: Maximum expo (minimal center sensitivity)
 * 
 * @note 30% expo provides good balance for most pilots. Racers may prefer lower
 *       (0.0-0.2), freestylers may prefer higher (0.4-0.6).
 */
#ifndef ACRO_RP_EXPO_DEFAULT
 #define ACRO_RP_EXPO_DEFAULT       0.3f    // ACRO roll and pitch expo parameter default
#endif

/**
 * @brief Acro mode yaw expo default
 * 
 * Default: 0.0 (linear)
 * Units: Dimensionless (0.0 to 1.0)
 * 
 * @details Exponential curve for yaw stick input. Default linear response
 *          (no expo) provides consistent yaw rate across stick range.
 * 
 * @note Yaw typically left linear since it requires less fine control than
 *       roll/pitch. Can be increased if yaw precision needed.
 */
#ifndef ACRO_Y_EXPO_DEFAULT
 #define ACRO_Y_EXPO_DEFAULT        0.0f    // ACRO yaw expo parameter default
#endif

/**
 * @brief Acro mode throttle mid-point
 * 
 * Default: 0.0 (use global THR_MID parameter)
 * Units: Dimensionless (0.0 to 1.0, or 0.0 for automatic)
 * 
 * @details Acro-specific throttle curve mid-point. Value of 0.0 uses global
 *          THR_MID parameter. Non-zero overrides for acro-specific hover throttle.
 * 
 * @note Usually left at 0.0 to use global hover throttle learning. Separate
 *       acro value only needed if hover throttle differs significantly in acro.
 */
#ifndef ACRO_THR_MID_DEFAULT
 #define ACRO_THR_MID_DEFAULT       0.0f
#endif

/**
 * @brief Acro mode roll/pitch rate default
 * 
 * Default: 360 degrees/second
 * Units: Degrees per second
 * 
 * @details Maximum rotation rate for roll and pitch axes at full stick deflection
 *          in Acro mode. Determines responsiveness and aggressiveness of acro flight.
 * 
 * Common rates:
 * - 180 deg/s: Mild acro, good for learning
 * - 360 deg/s: Moderate acro, full rotation in 1 second - default
 * - 540 deg/s: Aggressive acro, competition flying
 * - 720+ deg/s: Extreme acro, racing
 * 
 * @note 360 deg/s (1 rotation/second) is balanced default. Allows full flips/rolls
 *       while remaining controllable for intermediate pilots.
 */
#ifndef ACRO_RP_RATE_DEFAULT
 #define ACRO_RP_RATE_DEFAULT      360      // ACRO roll and pitch rotation rate parameter default in deg/s
#endif

/**
 * @brief Acro mode yaw rate default
 * 
 * Default: 202.5 degrees/second
 * Units: Degrees per second
 * 
 * @details Maximum yaw rotation rate at full stick deflection. Slower than
 *          roll/pitch rates as yaw typically requires less aggressiveness.
 * 
 * @note 202.5 deg/s allows reasonable yaw authority without over-spinning.
 *       Value chosen to match typical yaw motor authority relative to roll/pitch.
 */
#ifndef ACRO_Y_RATE_DEFAULT
 #define ACRO_Y_RATE_DEFAULT       202.5    // ACRO yaw rotation rate parameter default in deg/s
#endif

/**
 * @brief RTL (Return To Launch) mode final altitude
 * 
 * Default: 0 cm (land)
 * Units: Centimeters above home
 * 
 * @details Final altitude target for RTL mode after arriving at home position.
 *          Zero value triggers automatic landing. Non-zero holds at specified
 *          altitude indefinitely.
 * 
 * Typical configurations:
 * - 0: Automatic landing (default, safest for failsafe)
 * - 100-300: Hold low for manual takeover
 * - 500+: Hold high for extended operations
 * 
 * @warning Setting non-zero altitude means vehicle will NOT land automatically.
 *          Ensure sufficient battery capacity if using hold altitude, or vehicle
 *          may crash when battery depletes.
 * 
 * @note Zero (land) is safest default for failsafe RTL. Non-zero useful for
 *       demonstration flights where automatic landing undesired.
 */
#ifndef RTL_ALT_FINAL
 # define RTL_ALT_FINAL             0       // the altitude, in cm, the vehicle will move to as the final stage of Returning to Launch.  Set to zero to land.
#endif

/**
 * @brief RTL mode return altitude
 * 
 * Default: 1500 cm (15 meters)
 * Units: Centimeters above home
 * 
 * @details Altitude to maintain during horizontal return to home. Vehicle climbs
 *          to this altitude (if below), then flies level to home position.
 * 
 * Special values:
 * - 0: Maintain current altitude (no climb, direct return)
 * - >0: Target altitude for return flight
 * 
 * Altitude selection considerations:
 * - Must clear obstacles between current position and home
 * - Higher altitudes: Safer, more battery consumption
 * - Lower altitudes: Less battery, obstacle risk
 * - 15m default suitable for most open areas
 * 
 * @note RTL_CONE_SLOPE can modify this behavior to gradually descend during return
 *       rather than maintaining constant altitude.
 * 
 * @see RTL_CONE_SLOPE_DEFAULT for gradual descent configuration
 */
#ifndef RTL_ALT
 # define RTL_ALT                   1500    // default alt to return to home in cm, 0 = Maintain current altitude
#endif

/**
 * @brief RTL minimum altitude above ground
 * 
 * Default: 30 cm (0.3 meters)
 * Units: Centimeters above ground level
 * 
 * @details Minimum safe altitude for RTL operations. Prevents RTL from attempting
 *          return at dangerously low altitudes where ground obstacles could
 *          cause collision.
 * 
 * @note Primarily affects RTL_ALT=0 (maintain current altitude) mode. If current
 *       altitude below this minimum, vehicle climbs to minimum before returning.
 */
#ifndef RTL_ALT_MIN
 # define RTL_ALT_MIN               30     // min height above ground for RTL (i.e 30cm)
#endif

/**
 * @brief RTL initial climb distance
 * 
 * Default: 0 cm (no forced climb)
 * Units: Centimeters
 * 
 * @details Minimum distance to climb immediately upon entering RTL mode, regardless
 *          of current altitude or RTL_ALT setting. Ensures obstacle clearance
 *          near takeoff point.
 * 
 * Use cases:
 * - 0: No forced climb (default, use RTL_ALT logic only)
 * - 200-500: Small climb to clear nearby obstacles
 * - 1000+: Significant climb for obstacle-dense environment
 * 
 * @note This climb occurs BEFORE starting horizontal return, even if already
 *       above RTL_ALT. Useful in environments with tall obstacles near home.
 */
#ifndef RTL_CLIMB_MIN_DEFAULT
 # define RTL_CLIMB_MIN_DEFAULT     0       // vehicle will always climb this many cm as first stage of RTL
#endif

/**
 * @brief RTL cone slope for gradual descent
 * 
 * Default: 3.0 (slope ratio)
 * Units: Dimensionless ratio (height_change / horizontal_distance)
 * 
 * @details Defines cone-shaped descent path during RTL. Instead of flying level
 *          to home then descending, vehicle gradually descends while returning,
 *          following a cone surface.
 * 
 * Slope interpretation:
 * - 0.0: No cone (fly level, then descend)
 * - 1.0: 45-degree descent (1m down per 1m horizontal)
 * - 3.0: Gradual descent (1m down per 3m horizontal) - default
 * - 5.0+: Very gradual descent
 * 
 * Benefits:
 * - Reduces RTL time (descending while traveling)
 * - Maintains clearance over obstacles
 * - More efficient battery usage
 * 
 * @note Vehicle will not descend below RTL_ALT_MIN during cone descent.
 *       Cone slope of 3 means 1m descent for every 3m of horizontal travel.
 * 
 * @warning Ensure cone doesn't cause descent into obstacles along return path.
 *          Higher slopes safer but less efficient.
 */
#ifndef RTL_CONE_SLOPE_DEFAULT
 # define RTL_CONE_SLOPE_DEFAULT    3.0f    // slope of RTL cone (height / distance). 0 = No cone
#endif

/**
 * @brief Minimum allowed RTL cone slope
 * 
 * Default: 0.5 (shallow descent limit)
 * Units: Dimensionless ratio
 * 
 * @details Minimum slope value enforced for RTL cone. Prevents overly aggressive
 *          descent rates that could compromise safety.
 * 
 * @note Slope of 0.5 means maximum descent rate of 1m per 0.5m horizontal travel
 *       (steeper than default 3.0). Acts as safety limit on user configuration.
 */
#ifndef RTL_MIN_CONE_SLOPE
 # define RTL_MIN_CONE_SLOPE        0.5f    // minimum slope of cone
#endif

/**
 * @brief RTL loiter time above home
 * 
 * Default: 5000 milliseconds (5 seconds)
 * Units: Milliseconds
 * 
 * @details Duration to loiter (hover) above home position before beginning final
 *          descent or moving to RTL_ALT_FINAL altitude. Provides time for:
 *          - Pilot situation awareness
 *          - Video recording of approach
 *          - GPS position stabilization
 *          - Manual takeover opportunity
 * 
 * Configuration options:
 * - 0: Immediate descent (no loiter)
 * - 5000: Brief pause (5 seconds) - default
 * - 10000+: Extended loiter for observation
 * 
 * @note 5-second default balances safety awareness with battery conservation.
 *       Longer loiter useful for demonstration flights or when manual takeover
 *       likely needed.
 */
#ifndef RTL_LOITER_TIME
 # define RTL_LOITER_TIME           5000    // Time (in milliseconds) to loiter above home before beginning final descent
#endif

/**
 * @brief AUTO mode yaw behavior default
 * 
 * Default: WP_YAW_BEHAVIOR_LOOK_AT_NEXT_WP_EXCEPT_RTL
 * 
 * @details Controls how vehicle yaw (heading) is managed during AUTO mode
 *          waypoint navigation. Determines whether vehicle points at next
 *          waypoint, maintains specific heading, or follows other yaw strategies.
 * 
 * Available behaviors (from defines.h):
 * - WP_YAW_BEHAVIOR_NEVER_CHANGE: Maintain current heading
 * - WP_YAW_BEHAVIOR_FACE_NEXT_WP: Always point at next waypoint
 * - WP_YAW_BEHAVIOR_LOOK_AT_NEXT_WP_EXCEPT_RTL: Point at waypoint except in RTL
 * - WP_YAW_BEHAVIOR_CORRECT_XTRACK: Adjust yaw to correct cross-track error
 * 
 * @note Default looks at next waypoint for better awareness and video recording
 *       but uses pilot-controlled yaw during RTL for flexibility.
 * 
 * @see mode_auto.cpp for waypoint navigation and yaw control
 */
#ifndef WP_YAW_BEHAVIOR_DEFAULT
 # define WP_YAW_BEHAVIOR_DEFAULT   WP_YAW_BEHAVIOR_LOOK_AT_NEXT_WP_EXCEPT_RTL
#endif

/**
 * @brief Minimum ground speed for yaw look-ahead
 * 
 * Default: 100 cm/s (1 m/s)
 * Units: Centimeters per second
 * 
 * @details Minimum ground speed required before vehicle yaw automatically tracks
 *          ground course direction. Below this speed, yaw changes disabled to
 *          prevent spinning while stationary or moving slowly.
 * 
 * @note Prevents excessive yaw movement during slow flight, launch, or landing.
 *       1 m/s threshold filters out GPS noise while allowing course tracking at
 *       reasonable speeds.
 */
#ifndef YAW_LOOK_AHEAD_MIN_SPEED
 # define YAW_LOOK_AHEAD_MIN_SPEED  100             // minimum ground speed in cm/s required before copter is aimed at ground course
#endif

/**
 * @brief Super Simple mode activation radius
 * 
 * Default: 1000 cm (10 meters)
 * Units: Centimeters
 * 
 * @details Distance from home position within which Super Simple mode is active.
 *          Beyond this radius, Simple mode rules apply. Super Simple mode
 *          translates pilot input relative to direction from home.
 * 
 * Super Simple behavior:
 * - Pilot input always relative to home direction
 * - Forward stick always flies away from home
 * - Back stick always returns toward home
 * - Makes orientation intuitive for beginners
 * 
 * @note 10m radius provides intuitive control near launch point while reverting
 *       to Simple mode (relative to takeoff heading) at distance. Prevents
 *       disorientation when vehicle far from home.
 * 
 * @see Simple and Super Simple mode documentation for pilot training
 */
#ifndef SUPER_SIMPLE_RADIUS
 # define SUPER_SIMPLE_RADIUS       1000
#endif

/**
 * @brief Stabilize mode rate control parameters
 * 
 * @details Configures pilot stick input ranges and maximum attitude angles for
 *          stabilize and similar manual flight modes.
 */

/**
 * @brief Roll, pitch, and yaw input maximum value
 * 
 * Default: 4500 (45.00 degrees in centidegrees)
 * Units: Centidegrees
 * 
 * @details Maximum pilot stick input value for roll, pitch, and yaw channels.
 *          Defines full stick deflection in terms of angle or rate command.
 * 
 * Input scaling:
 * - Full stick right: +4500 (45 degrees or rate proportional)
 * - Center: 0
 * - Full stick left: -4500 (-45 degrees or rate proportional)
 * 
 * @note This is internal scaling value. Actual maximum lean angle controlled
 *       by ANGLE_MAX parameter which defaults to DEFAULT_ANGLE_MAX (30 degrees).
 */
#ifndef ROLL_PITCH_YAW_INPUT_MAX
 # define ROLL_PITCH_YAW_INPUT_MAX      4500        // roll, pitch and yaw input range
#endif

/**
 * @brief Default maximum lean angle
 * 
 * Default: 3000 centidegrees (30 degrees)
 * Units: Centidegrees
 * 
 * @details Default maximum lean angle for roll and pitch in stabilize, alt-hold,
 *          loiter, and similar modes. Limits how far vehicle can tilt in response
 *          to pilot input or autonomous navigation.
 * 
 * Angle selection guidance:
 * - 2000-2500 (20-25°): Conservative, smooth video, beginner-friendly
 * - 3000 (30°): Moderate, good balance - default
 * - 4000-4500 (40-45°): Aggressive, faster response, experienced pilots
 * - 6000+ (60°+): Extreme, racing, requires expert skills
 * 
 * @warning Safety-critical parameter. Excessive angles can cause loss of control,
 *          especially with heavy vehicles or weak motors. Higher angles increase
 *          crash risk if pilot loses orientation.
 * 
 * @note 30-degree default provides good maneuverability while maintaining safety
 *       margin. Most recreational and commercial operations comfortable at this
 *       setting. Can be adjusted via ANGLE_MAX parameter at runtime.
 */
#ifndef DEFAULT_ANGLE_MAX
 # define DEFAULT_ANGLE_MAX         3000            // ANGLE_MAX parameters default value
#endif

//////////////////////////////////////////////////////////////////////////////
/**
 * @brief Brake mode (Stop mode) defaults
 * 
 * @details Configuration for Brake mode behavior, which brings vehicle to rapid
 *          stop from any velocity. Brake mode aggressively arrests motion while
 *          maintaining altitude control.
 */

/**
 * @brief Brake mode vertical speed limit
 * 
 * Default: 250 cm/s (2.5 m/s)
 * Units: Centimeters per second
 * 
 * @details Maximum vertical speed maintained during brake mode. Altitude control
 *          remains active during horizontal braking to prevent altitude loss.
 * 
 * @note Vertical speed limit prevents excessive climb/descent while focusing
 *       on horizontal braking. Balances altitude hold with brake performance.
 */
#ifndef BRAKE_MODE_SPEED_Z
 # define BRAKE_MODE_SPEED_Z     250 // z-axis speed in cm/s in Brake Mode
#endif

/**
 * @brief Brake mode deceleration rate
 * 
 * Default: 750 cm/s² (7.5 m/s²)
 * Units: Centimeters per second squared
 * 
 * @details Target deceleration rate for stopping. Aggressive deceleration brings
 *          vehicle to stop quickly from high speed.
 * 
 * Deceleration comparison:
 * - 250 cm/s²: Gentle stop
 * - 500 cm/s²: Moderate stop
 * - 750 cm/s²: Aggressive stop - default
 * - 1000+ cm/s²: Very aggressive (may exceed vehicle capability)
 * 
 * @note 750 cm/s² (~0.75g) is aggressive but achievable by most multirotors.
 *       Actual deceleration limited by motor power and lean angle limits.
 */
#ifndef BRAKE_MODE_DECEL_RATE
 # define BRAKE_MODE_DECEL_RATE  750 // acceleration rate in cm/s/s in Brake Mode
#endif

/**
 * @brief PosHold (Position Hold) mode parameter defaults
 * 
 * @details Configuration for PosHold mode braking behavior. PosHold provides
 *          alternative position hold with airplane-like stick feel and aggressive
 *          braking when sticks centered.
 */

/**
 * @brief PosHold brake rotation rate default
 * 
 * Default: 8 degrees/second
 * Units: Degrees per second
 * 
 * @details Yaw rotation rate applied during braking in PosHold mode. Allows
 *          vehicle to continue rotating while stopping horizontal motion.
 * 
 * @note Slow rotation rate during brake allows pilot to adjust heading without
 *       disrupting stop maneuver. 8 deg/s provides gentle heading changes.
 */
/**
 * @brief PosHold brake rotation rate minimum
 * 
 * Default: 4 degrees/second
 * Units: Degrees per second
 * 
 * @details Minimum allowed brake rotation rate. Prevents excessively slow yaw.
 */
#ifndef POSHOLD_BRAKE_RATE_DEFAULT
 # define POSHOLD_BRAKE_RATE_DEFAULT    8       // default POSHOLD_BRAKE_RATE param value.  Rotation rate during braking in deg/sec
 # define POSHOLD_BRAKE_RATE_MIN        4       // default POSHOLD_BRAKE_RATE param value.  Rotation rate during braking in deg/sec
#endif

/**
 * @brief PosHold maximum brake angle
 * 
 * Default: 3000 centidegrees (30 degrees)
 * Units: Centidegrees
 * 
 * @details Maximum lean angle used during PosHold braking maneuver. Limits how
 *          aggressively vehicle can lean to arrest motion.
 * 
 * @note 30-degree limit provides strong braking without excessive lean that
 *       could compromise stability or pilot comfort.
 */
#ifndef POSHOLD_BRAKE_ANGLE_DEFAULT
 # define POSHOLD_BRAKE_ANGLE_DEFAULT   3000    // default POSHOLD_BRAKE_ANGLE param value.  Max lean angle during braking in centi-degrees
#endif

/**
 * @brief Pilot control input defaults
 * 
 * @details Default values for pilot input processing including stick deadbands,
 *          rate limits, and exponential curves for altitude, yaw, and other
 *          control axes.
 */

/**
 * @brief Throttle stick deadzone
 * 
 * Default: 100 (PWM units)
 * Units: Dimensionless PWM units
 * 
 * @details Deadzone above and below mid-throttle in altitude hold and loiter
 *          modes. Within deadzone, altitude hold active. Outside deadzone,
 *          pilot commands vertical velocity.
 * 
 * @note Deadzone prevents unintended climbs/descents from minor stick movements
 *       or transmitter trim variations. 100 units provides comfortable margin
 *       without reducing control authority.
 */
#ifndef THR_DZ_DEFAULT
# define THR_DZ_DEFAULT         100             // the deadzone above and below mid throttle while in althold or loiter
#endif

/**
 * @brief Maximum pilot-commanded vertical velocity
 * 
 * Default: 250 cm/s (2.5 m/s)
 * Units: Centimeters per second
 * 
 * @details Maximum climb/descent rate pilot can command via throttle stick in
 *          altitude control modes (AltHold, Loiter, PosHold, etc.).
 * 
 * Speed selection:
 * - 150 cm/s: Conservative, smooth video
 * - 250 cm/s: Moderate, good control - default  
 * - 500 cm/s: Fast, responsive
 * - 750+ cm/s: Aggressive, racing
 * 
 * @note 2.5 m/s default provides good responsiveness without being jarring.
 *       Higher speeds require careful pilot control to avoid hard landings.
 */
#ifndef PILOT_VELZ_MAX
 # define PILOT_VELZ_MAX    250     // maximum vertical velocity in cm/s
#endif

/**
 * @brief Pilot vertical acceleration default
 * 
 * Default: 250 cm/s² (2.5 m/s²)
 * Units: Centimeters per second squared
 * 
 * @details Vertical acceleration/deceleration rate when pilot controls altitude.
 *          Determines how quickly vehicle reaches commanded vertical velocity.
 * 
 * @note Matching velocity and acceleration values (both 250) provides 1-second
 *       time constant for velocity changes - smooth without sluggish feel.
 */
#ifndef PILOT_ACCEL_Z_DEFAULT
 # define PILOT_ACCEL_Z_DEFAULT 250 // vertical acceleration in cm/s/s while altitude is under pilot control
#endif

/**
 * @brief Pilot yaw rate default (non-Acro modes)
 * 
 * Default: 202.5 degrees/second
 * Units: Degrees per second
 * 
 * @details Yaw rotation rate at full stick deflection in all modes except Acro.
 *          Applies to Stabilize, AltHold, Loiter, and other pilot-controlled modes.
 * 
 * @note 202.5 deg/s provides reasonable yaw authority without over-spinning.
 *       Slower than roll/pitch rates as yaw generally requires less aggressiveness.
 *       Separate from ACRO_Y_RATE_DEFAULT which applies only in Acro mode.
 */
#ifndef PILOT_Y_RATE_DEFAULT
 # define PILOT_Y_RATE_DEFAULT  202.5   // yaw rotation rate parameter default in deg/s for all mode except ACRO
#endif

/**
 * @brief Pilot yaw expo default (non-Acro modes)
 * 
 * Default: 0.0 (linear)
 * Units: Dimensionless (0.0 to 1.0)
 * 
 * @details Exponential curve applied to yaw stick input in non-Acro modes.
 *          Zero provides linear response.
 * 
 * @note Linear yaw response (no expo) standard for most flight modes as yaw
 *       requires less fine control than roll/pitch. Separate from Acro yaw expo.
 */
#ifndef PILOT_Y_EXPO_DEFAULT
 # define PILOT_Y_EXPO_DEFAULT  0.0     // yaw expo parameter default for all mode except ACRO
#endif

/**
 * @brief Automatic disarming delay
 * 
 * Default: 10 seconds
 * Units: Seconds
 * 
 * @details Time after landing detection before motors automatically disarm.
 *          Prevents accidental immediate disarm if landing briefly detected,
 *          but ensures motors don't run indefinitely on ground.
 * 
 * @warning Safety parameter. Too short may cause disarm during intended ground
 *          operations. Too long wastes battery and increases tip-over risk from
 *          active motors on ground.
 * 
 * @note 10-second delay provides time for pilot to recognize landing and manually
 *       disarm, or to take off again if landing was momentary ground contact.
 */
#ifndef AUTO_DISARMING_DELAY
# define AUTO_DISARMING_DELAY  10
#endif

/**
 * @brief Throw mode configuration
 * 
 * @details Parameters for Throw mode, which allows pilot to throw vehicle into
 *          air where it detects launch and automatically starts motors. Used for
 *          hand-launched operations.
 * 
 * @warning Throw mode is advanced feature requiring careful technique. Improper
 *          throws can cause crash or injury.
 */

/**
 * @brief Throw mode high speed threshold
 * 
 * Default: 500.0 cm/s (5 m/s)
 * Units: Centimeters per second (3D velocity)
 * 
 * @details Total 3D speed vehicle must reach (or be in free fall) before Throw
 *          mode activates motors. Prevents accidental activation from minor
 *          movements.
 * 
 * @note 5 m/s threshold requires deliberate throw, preventing false triggers
 *       while being achievable with proper hand launch technique.
 */
#ifndef THROW_HIGH_SPEED
# define THROW_HIGH_SPEED       500.0f  // vehicle much reach this total 3D speed in cm/s (or be free falling)
#endif

/**
 * @brief Throw mode vertical speed motor start threshold
 * 
 * Default: 50.0 cm/s (0.5 m/s)
 * Units: Centimeters per second (vertical)
 * 
 * @details Vertical speed threshold where motors start spinning during throw.
 *          Lower than high-speed threshold, starts motors during upward portion
 *          of throw for stabilization.
 * 
 * @note Motors begin spinning at 0.5 m/s vertical speed to establish attitude
 *       control before vehicle peaks and begins falling.
 */
#ifndef THROW_VERTICAL_SPEED
# define THROW_VERTICAL_SPEED   50.0f   // motors start when vehicle reaches this total 3D speed in cm/s
#endif

/**
 * @brief Logging control configuration
 * 
 * @details Configures default logging behavior for ArduPilot binary logs.
 *          Logs are essential for flight analysis, debugging, and incident
 *          investigation.
 * 
 * @note Binary logs written to SD card (or internal flash on some boards).
 *       Log analysis performed with MAVExplorer, Mission Planner, or similar tools.
 * 
 * @see AP_Logger library for logging implementation
 * @see LogStructure.h for log message format definitions
 */

/**
 * @brief Default logging bitmask
 * 
 * Default: Combination of essential log message types
 * Units: Bitmask of MASK_LOG_* flags
 * 
 * @details Defines which log message types are recorded by default. Each bit
 *          corresponds to a category of log messages. Bitmask approach allows
 *          selective logging to manage storage and performance.
 * 
 * Default enabled log types:
 * - MASK_LOG_ATTITUDE_MED: Attitude at medium rate (roll, pitch, yaw)
 * - MASK_LOG_GPS: GPS position, velocity, accuracy
 * - MASK_LOG_PM: Performance monitoring (CPU load, loop time)
 * - MASK_LOG_CTUN: Control tuning (altitude controller)
 * - MASK_LOG_NTUN: Navigation tuning (position controller)
 * - MASK_LOG_RCIN: RC input values from receiver
 * - MASK_LOG_IMU: Inertial measurement (accelerometer, gyro)
 * - MASK_LOG_CMD: Mission commands and events
 * - MASK_LOG_CURRENT: Battery current and voltage
 * - MASK_LOG_RCOUT: Servo/motor output values
 * - MASK_LOG_OPTFLOW: Optical flow sensor data
 * - MASK_LOG_PID: PID controller gains and performance
 * - MASK_LOG_COMPASS: Magnetometer readings
 * - MASK_LOG_CAMERA: Camera trigger events
 * - MASK_LOG_MOTBATT: Individual motor/ESC telemetry
 * 
 * Additional available log types (not enabled by default):
 * - MASK_LOG_ATTITUDE_FAST: High-rate attitude (400Hz, large logs)
 * - MASK_LOG_RAW_IMU: Raw IMU data (before filtering)
 * - MASK_LOG_VIDEO_STABILISATION: Gimbal/stabilization data
 * - Many others for specialized debugging
 * 
 * Storage considerations:
 * - Default selection balances useful data vs storage space
 * - Full logging can fill 32GB card in ~10 hours of flight
 * - Selective logging extends storage capacity
 * - Log download time increases with more data
 * 
 * @warning Disabling ATTITUDE, GPS, or CTUN logs severely limits flight
 *          analysis capability. Recommend keeping default selection unless
 *          storage critically limited.
 * 
 * @note Runtime adjustable via LOG_BITMASK parameter. This default applies
 *       on first boot or after parameter reset.
 * 
 * @note Medium-rate attitude logging (10Hz) provides good analysis capability
 *       without excessive storage usage. ATTITUDE_FAST (400Hz) useful for
 *       vibration analysis but creates very large logs.
 * 
 * @see AP_Logger library for complete list of MASK_LOG_* definitions
 * @see LOG_BITMASK parameter for runtime configuration
 */
#ifndef DEFAULT_LOG_BITMASK
 # define DEFAULT_LOG_BITMASK \
    MASK_LOG_ATTITUDE_MED | \
    MASK_LOG_GPS | \
    MASK_LOG_PM | \
    MASK_LOG_CTUN | \
    MASK_LOG_NTUN | \
    MASK_LOG_RCIN | \
    MASK_LOG_IMU | \
    MASK_LOG_CMD | \
    MASK_LOG_CURRENT | \
    MASK_LOG_RCOUT | \
    MASK_LOG_OPTFLOW | \
    MASK_LOG_PID | \
    MASK_LOG_COMPASS | \
    MASK_LOG_CAMERA | \
    MASK_LOG_MOTBATT
#endif

/**
 * @brief Feature dependency validation
 * 
 * @details Compile-time checks ensuring that feature dependencies are satisfied.
 *          These checks prevent invalid configurations where enabled features
 *          depend on disabled features, which would cause runtime failures.
 * 
 * @warning These are compile-time safety checks. Build will fail with clear
 *          error message if dependencies violated. This is intentional - it
 *          prevents creation of non-functional firmware.
 * 
 * Dependency enforcement philosophy:
 * - Fail fast at compile time rather than runtime
 * - Provide clear error messages for resolution
 * - Prevent subtle bugs from missing features
 * - Guide developers to valid configurations
 * 
 * @note When adding new features with dependencies, add corresponding checks
 *       in this section to maintain build safety.
 */

/**
 * @brief Validate Follow mode dependencies
 * 
 * @details Follow mode requires AP_Avoidance library for obstacle detection
 *          during following operations. Cannot enable Follow without avoidance.
 * 
 * Resolution: If Follow mode needed, ensure AP_AVOIDANCE_ENABLED = 1
 */
#if MODE_FOLLOW_ENABLED && !AP_AVOIDANCE_ENABLED
  #error Follow Mode relies on AP_AVOIDANCE_ENABLED which is disabled
#endif

/**
 * @brief Validate Auto mode requires Guided mode
 * 
 * @details Auto mode uses Guided mode internally for guided mission items
 *          (MAV_CMD_NAV_GUIDED_ENABLE and similar commands). Auto cannot
 *          function without Guided mode available.
 * 
 * Resolution: Keep MODE_GUIDED_ENABLED = 1 if using Auto mode
 * 
 * @warning Critical dependency. Many mission commands require Guided mode.
 */
#if MODE_AUTO_ENABLED && !MODE_GUIDED_ENABLED
  #error ModeAuto requires ModeGuided which is disabled
#endif

/**
 * @brief Validate Auto mode requires Circle mode
 * 
 * @details Auto mode uses Circle mode for loiter-turns and circle mission
 *          items (MAV_CMD_NAV_LOITER_TURNS). Auto missions with circle
 *          commands will fail without Circle mode.
 * 
 * Resolution: Keep MODE_CIRCLE_ENABLED = 1 if using Auto mode
 */
#if MODE_AUTO_ENABLED && !MODE_CIRCLE_ENABLED
  #error ModeAuto requires ModeCircle which is disabled
#endif

/**
 * @brief Validate Auto mode requires RTL mode
 * 
 * @details Auto mode uses RTL mode for return-to-launch mission items
 *          (MAV_CMD_NAV_RETURN_TO_LAUNCH) and as fallback for some mission
 *          failures. Critical dependency for safe Auto operation.
 * 
 * Resolution: Keep MODE_RTL_ENABLED = 1 if using Auto mode
 * 
 * @warning RTL is essential safety feature for Auto missions. Strongly
 *          recommend keeping both enabled.
 */
#if MODE_AUTO_ENABLED && !MODE_RTL_ENABLED
  #error ModeAuto requires ModeRTL which is disabled
#endif

/**
 * @brief Validate helicopter frame requires Acro mode
 * 
 * @details Traditional helicopters require Acro mode for proper rotor speed
 *          management and collective pitch control. Helicopter-specific control
 *          algorithms depend on Acro mode infrastructure.
 * 
 * Resolution: Keep MODE_ACRO_ENABLED = 1 for HELI_FRAME configuration
 * 
 * @warning Helicopters cannot fly safely without Acro mode support.
 */
#if FRAME_CONFIG == HELI_FRAME && !MODE_ACRO_ENABLED
  #error Helicopter frame requires acro mode support which is disabled
#endif

/**
 * @brief Validate SmartRTL requires RTL mode
 * 
 * @details SmartRTL falls back to standard RTL when path memory full or path
 *          invalid. Requires RTL mode for fallback behavior.
 * 
 * Resolution: Keep MODE_RTL_ENABLED = 1 if using SmartRTL mode
 */
#if MODE_SMARTRTL_ENABLED && !MODE_RTL_ENABLED
  #error SmartRTL requires ModeRTL which is disabled
#endif

/**
 * @brief Validate ADSB requires Guided mode
 * 
 * @details ADSB collision avoidance executes avoidance maneuvers by commanding
 *          Guided mode movements. Cannot perform avoidance without Guided mode.
 * 
 * Resolution: Keep MODE_GUIDED_ENABLED = 1 if using ADSB
 * 
 * @warning ADSB avoidance safety feature non-functional without Guided mode.
 */
#if HAL_ADSB_ENABLED && !MODE_GUIDED_ENABLED
  #error ADSB requires ModeGuided which is disabled
#endif

/**
 * @brief Validate Follow mode requires Guided mode
 * 
 * @details Follow mode uses Guided mode infrastructure to command position
 *          targets while following. Cannot follow without Guided mode available.
 * 
 * Resolution: Keep MODE_GUIDED_ENABLED = 1 if using Follow mode
 */
#if MODE_FOLLOW_ENABLED && !MODE_GUIDED_ENABLED
  #error Follow requires ModeGuided which is disabled
#endif

/**
 * @brief Validate GuidedNoGPS requires Guided mode
 * 
 * @details GuidedNoGPS is variant of Guided mode, sharing core infrastructure.
 *          Cannot have GPS-free Guided without base Guided mode.
 * 
 * Resolution: Keep MODE_GUIDED_ENABLED = 1 if using GuidedNoGPS mode
 */
#if MODE_GUIDED_NOGPS_ENABLED && !MODE_GUIDED_ENABLED
  #error ModeGuided-NoGPS requires ModeGuided which is disabled
#endif

/**
 * @brief Developer and advanced feature configuration
 * 
 * @details Configuration options for advanced features, experimental modes,
 *          and developer-specific functionality. Many of these features are
 *          disabled by default or intended for specific use cases.
 * 
 * @warning Options in this section may be experimental, under development,
 *          or intended for specialized applications. Review documentation
 *          carefully before enabling.
 */

/**
 * @brief Enable Advanced Failsafe system
 * 
 * Default: 0 (disabled)
 * 
 * @details Advanced failsafe provides enhanced safety termination when critical
 *          failures detected. Includes hardware-level termination pins that
 *          directly cut motor power independent of main processor.
 * 
 * Features:
 * - Hardware termination pins for fail-safe motor cutoff
 * - Independent watchdog monitoring
 * - Enhanced failure detection beyond standard failsafes
 * - Designed for commercial/regulated operations
 * 
 * @warning Requires specific hardware support (termination circuits).
 *          Do not enable without proper hardware implementation.
 * 
 * @note Primarily used in commercial applications requiring certified
 *       termination systems. Most users should leave disabled.
 * 
 * @see AP_AdvancedFailsafe library for implementation details
 */
#ifndef AP_COPTER_ADVANCED_FAILSAFE_ENABLED
# define AP_COPTER_ADVANCED_FAILSAFE_ENABLED 0
#endif

/**
 * @brief Enable automatic AHRS trim on ground
 * 
 * Default: 1 (enabled)
 * 
 * @details Automatically adjusts AHRS trim (roll/pitch offsets) when vehicle
 *          stationary on ground. Compensates for slight sensor mounting errors
 *          or frame misalignment.
 * 
 * Behavior:
 * - Activates when vehicle stationary and disarmed
 * - Learns trim over time to minimize drift
 * - Adjusts for frame/sensor mounting imperfections
 * - Improves flight performance without manual trim adjustment
 * 
 * @note Generally should remain enabled. Helps maintain accuracy despite
 *       minor build variations. Disable only if experiencing unexpected
 *       trim behavior or for special testing.
 * 
 * @see AHRS_TRIM_X, AHRS_TRIM_Y parameters for manual trim adjustment
 */
#ifndef AP_COPTER_AHRS_AUTO_TRIM_ENABLED
# define AP_COPTER_AHRS_AUTO_TRIM_ENABLED 1
#endif

/**
 * @brief Default RC channel for flight mode selection
 * 
 * Default: 5 (RC channel 5)
 * Units: RC channel number (1-16)
 * 
 * @details Specifies which RC input channel controls flight mode selection
 *          by default. Typically mapped to 3-position or 6-position switch
 *          on transmitter.
 * 
 * Common configurations:
 * - Channel 5: Traditional flight mode channel (3-position switch)
 * - Channel 8: Alternative when channel 5 used for other purpose
 * - 6-position switches allow direct mode selection
 * 
 * @note Runtime configurable via FLTMODE_CH parameter. This sets initial
 *       default on first boot.
 * 
 * @note Flight mode PWM ranges typically:
 *       PWM < 1230: Mode 1
 *       PWM 1230-1360: Mode 2
 *       PWM 1361-1490: Mode 3
 *       PWM 1491-1620: Mode 4
 *       PWM 1621-1749: Mode 5
 *       PWM > 1750: Mode 6
 */
#ifndef CH_MODE_DEFAULT
 # define CH_MODE_DEFAULT   5
#endif

/**
 * @brief Enable Toy Mode (simplified flight mode)
 * 
 * Default: 0 (disabled)
 * 
 * @details Toy mode provides simplified flight controls designed for beginner
 *          pilots or toy-grade vehicles. Reduces complexity at cost of
 *          advanced capabilities.
 * 
 * Features:
 * - Simplified control scheme
 * - Reduced configuration complexity
 * - Lower performance demands
 * - Suitable for small/toy vehicles
 * 
 * Limitations:
 * - Not available on helicopters (compile error if enabled)
 * - Reduced feature set compared to standard modes
 * - Not suitable for serious applications
 * 
 * @warning Toy mode is specialized feature for specific vehicle class.
 *          Not recommended for standard multicopters. Keep disabled for
 *          normal operations.
 * 
 * @note Experimental feature with limited support and documentation.
 */
#ifndef TOY_MODE_ENABLED
#define TOY_MODE_ENABLED 0
#endif

/**
 * @brief Validate Toy mode not enabled on helicopters
 * 
 * @details Toy mode incompatible with helicopter control dynamics and rotor
 *          speed management. Helicopters require full control authority.
 */
#if TOY_MODE_ENABLED && FRAME_CONFIG == HELI_FRAME
  #error Toy mode is not available on Helicopters
#endif

/**
 * @brief Default motor frame type
 * 
 * Default: AP_Motors::MOTOR_FRAME_TYPE_X (X configuration)
 * 
 * @details Defines default motor layout/mixing for multicopter frame. Determines
 *          how roll/pitch/yaw commands translated to individual motor outputs.
 * 
 * Common frame types:
 * - MOTOR_FRAME_TYPE_X: X configuration (most common, motors at 45° angles)
 * - MOTOR_FRAME_TYPE_PLUS: + configuration (motors aligned with axes)
 * - MOTOR_FRAME_TYPE_V: V-tail configuration
 * - MOTOR_FRAME_TYPE_H: H configuration
 * - MOTOR_FRAME_TYPE_VTAIL: V-tail
 * - MOTOR_FRAME_TYPE_ATAIL: A-tail
 * - Many others for specialized frames
 * 
 * @note Runtime configurable via FRAME_TYPE parameter. This sets initial
 *       default. X configuration most common due to symmetrical control
 *       response and ease of tuning.
 * 
 * @see AP_Motors library for complete frame type enumeration
 * @see FRAME_TYPE parameter for runtime configuration
 */
#ifndef HAL_FRAME_TYPE_DEFAULT
#define HAL_FRAME_TYPE_DEFAULT AP_Motors::MOTOR_FRAME_TYPE_X
#endif

/**
 * @brief Enable custom control for multicopters
 * 
 * Default: Conditional (enabled only for MULTICOPTER_FRAME && AP_CUSTOMCONTROL_ENABLED)
 * 
 * @details Allows loading of custom control algorithms via Lua scripting or
 *          external libraries. Enables replacement of standard attitude/position
 *          controllers with custom implementations.
 * 
 * Use cases:
 * - Research on novel control algorithms
 * - Specialized vehicle dynamics (tilt-rotors, etc.)
 * - Academic studies of control theory
 * - Custom control laws for unusual frames
 * 
 * Dependencies:
 * - Requires AP_CUSTOMCONTROL_ENABLED in core libraries
 * - Only applicable to multicopter frames (not helicopters)
 * 
 * @warning Custom control bypasses extensively tested standard controllers.
 *          Only for advanced users with control theory expertise. Can easily
 *          result in unstable or dangerous vehicle behavior.
 * 
 * @note Requires scripting or custom code to provide controller implementation.
 *       Does nothing without custom control code loaded.
 * 
 * @see AC_CustomControl library for interface definition
 * @see AP_Scripting for Lua-based custom control examples
 */
#ifndef AC_CUSTOMCONTROL_MULTI_ENABLED
#define AC_CUSTOMCONTROL_MULTI_ENABLED FRAME_CONFIG == MULTICOPTER_FRAME && AP_CUSTOMCONTROL_ENABLED
#endif

/**
 * @brief Enable payload place mode functionality
 * 
 * Default: 1 (enabled)
 * 
 * @details Enables precision payload placement capability, allowing vehicle to
 *          descend, place payload using gripper/winch, and detect touchdown
 *          to release automatically.
 * 
 * Features:
 * - Precision descent for payload placement
 * - Automatic touchdown detection
 * - Gripper/winch integration
 * - Configurable descent rate and detection sensitivity
 * - Useful for delivery, construction, inspection applications
 * 
 * Hardware requirements:
 * - Gripper (AP_Gripper) or winch (AP_Winch) for payload release
 * - Optional rangefinder for precise altitude control
 * 
 * @note Useful feature for commercial applications (delivery, construction).
 *       Can be disabled to save ~2-3 KB if payload operations not needed.
 * 
 * @see mode_auto.cpp for payload place implementation
 * @see AP_Gripper, AP_Winch libraries for payload mechanism control
 */
#ifndef AC_PAYLOAD_PLACE_ENABLED
#define AC_PAYLOAD_PLACE_ENABLED 1
#endif

/**
 * @brief Enable user-defined parameters
 * 
 * Default: 0 (disabled)
 * 
 * @details Allows definition of custom user parameters (USER_PARAM1-USER_PARAM6)
 *          accessible via MAVLink and scripting. Useful for custom applications
 *          requiring persistent configuration storage.
 * 
 * Use cases:
 * - Custom Lua script configuration
 * - Application-specific settings
 * - Experimental feature parameters
 * - User-defined mission behavior
 * 
 * @note Provides 6 user-definable float parameters stored in EEPROM.
 *       Accessible from scripts and ground station. Enable only if custom
 *       parameters needed (~1-2 KB).
 * 
 * @see AP_Param for parameter system implementation
 */
#ifndef USER_PARAMS_ENABLED
  #define USER_PARAMS_ENABLED 0
#endif
